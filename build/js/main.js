!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function n(t,e,n){n=n||_t;var i,o,s=n.createElement("script");if(s.text=t,e)for(i in wt)o=e[i]||e.getAttribute&&e.getAttribute(i),o&&s.setAttribute(i,o);n.head.appendChild(s).parentNode.removeChild(s)}function i(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?ht[ft.call(t)]||"object":typeof t}function o(t){var e=!!t&&"length"in t&&t.length,n=i(t);return!yt(t)&&!bt(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function r(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}function a(t,e,n){return yt(e)?Tt.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?Tt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?Tt.grep(t,function(t){return dt.call(e,t)>-1!==n}):Tt.filter(e,t,n)}function l(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function c(t){var e={};return Tt.each(t.match(qt)||[],function(t,n){e[n]=!0}),e}function u(t){return t}function d(t){throw t}function h(t,e,n,i){var o;try{t&&yt(o=t.promise)?o.call(t).done(e).fail(n):t&&yt(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}function f(){_t.removeEventListener("DOMContentLoaded",f),t.removeEventListener("load",f),Tt.ready()}function p(t,e){return e.toUpperCase()}function g(t){return t.replace(Vt,"ms-").replace(Qt,p)}function m(){this.expando=Tt.expando+m.uid++}function v(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Zt.test(t)?JSON.parse(t):t)}function y(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Gt,"-$&").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n=v(n)}catch(o){}Kt.set(t,e,n)}else n=void 0;return n}function b(t,e,n,i){var o,s,r=20,a=i?function(){return i.cur()}:function(){return Tt.css(t,e,"")},l=a(),c=n&&n[3]||(Tt.cssNumber[e]?"":"px"),u=t.nodeType&&(Tt.cssNumber[e]||"px"!==c&&+l)&&te.exec(Tt.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;r--;)Tt.style(t,e,u+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),u/=s;u=2*u,Tt.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}function _(t){var e,n=t.ownerDocument,i=t.nodeName,o=re[i];return o?o:(e=n.body.appendChild(n.createElement(i)),o=Tt.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),re[i]=o,o)}function w(t,e){for(var n,i,o=[],s=0,r=t.length;s<r;s++)i=t[s],i.style&&(n=i.style.display,e?("none"===n&&(o[s]=Yt.get(i,"display")||null,o[s]||(i.style.display="")),""===i.style.display&&se(i)&&(o[s]=_(i))):"none"!==n&&(o[s]="none",Yt.set(i,"display",n)));for(s=0;s<r;s++)null!=o[s]&&(t[s].style.display=o[s]);return t}function x(t,e){var n;return n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&s(t,e)?Tt.merge([t],n):n}function C(t,e){for(var n=0,i=t.length;n<i;n++)Yt.set(t[n],"globalEval",!e||Yt.get(e[n],"globalEval"))}function T(t,e,n,o,s){for(var r,a,l,c,u,d,h=e.createDocumentFragment(),f=[],p=0,g=t.length;p<g;p++)if(r=t[p],r||0===r)if("object"===i(r))Tt.merge(f,r.nodeType?[r]:r);else if(de.test(r)){for(a=a||h.appendChild(e.createElement("div")),l=(le.exec(r)||["",""])[1].toLowerCase(),c=ue[l]||ue._default,a.innerHTML=c[1]+Tt.htmlPrefilter(r)+c[2],d=c[0];d--;)a=a.lastChild;Tt.merge(f,a.childNodes),a=h.firstChild,a.textContent=""}else f.push(e.createTextNode(r));for(h.textContent="",p=0;r=f[p++];)if(o&&Tt.inArray(r,o)>-1)s&&s.push(r);else if(u=ie(r),a=x(h.appendChild(r),"script"),u&&C(a),n)for(d=0;r=a[d++];)ce.test(r.type||"")&&n.push(r);return h}function E(){return!0}function S(){return!1}function $(t,e,n,i,o,s){var r,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)$(t,a,n,i,e[a],s);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),o===!1)o=S;else if(!o)return t;return 1===s&&(r=o,o=function(t){return Tt().off(t),r.apply(this,arguments)},o.guid=r.guid||(r.guid=Tt.guid++)),t.each(function(){Tt.event.add(this,e,o,i,n)})}function k(t,e,n){return n?(Yt.set(t,e,!1),void Tt.event.add(t,e,{namespace:!1,handler:function(t){var n,i=Yt.get(this,e);if(1&t.isTrigger&&this[e]){if(i)(Tt.event.special[e]||{}).delegateType&&t.stopPropagation();else if(i=lt.call(arguments),Yt.set(this,e,i),this[e](),n=Yt.get(this,e),Yt.set(this,e,!1),i!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else i&&(Yt.set(this,e,Tt.event.trigger(i[0],i.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=E)}})):void(void 0===Yt.get(t,e)&&Tt.event.add(t,e,E))}function A(t,e){return s(t,"table")&&s(11!==e.nodeType?e:e.firstChild,"tr")?Tt(t).children("tbody")[0]||t:t}function D(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function P(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function j(t,e){var n,i,o,s,r,a,l;if(1===e.nodeType){if(Yt.hasData(t)&&(s=Yt.get(t),l=s.events)){Yt.remove(e,"handle events");for(o in l)for(n=0,i=l[o].length;n<i;n++)Tt.event.add(e,o,l[o][n])}Kt.hasData(t)&&(r=Kt.access(t),a=Tt.extend({},r),Kt.set(e,a))}}function I(t,e){var n=e.nodeName.toLowerCase();"input"===n&&ae.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function N(t,e,i,o){e=ct(e);var s,r,a,l,c,u,d=0,h=t.length,f=h-1,p=e[0],g=yt(p);if(g||h>1&&"string"==typeof p&&!vt.checkClone&&pe.test(p))return t.each(function(n){var s=t.eq(n);g&&(e[0]=p.call(this,n,s.html())),N(s,e,i,o)});if(h&&(s=T(e,t[0].ownerDocument,!1,t,o),r=s.firstChild,1===s.childNodes.length&&(s=r),r||o)){for(a=Tt.map(x(s,"script"),D),l=a.length;d<h;d++)c=s,d!==f&&(c=Tt.clone(c,!0,!0),l&&Tt.merge(a,x(c,"script"))),i.call(t[d],c,d);if(l)for(u=a[a.length-1].ownerDocument,Tt.map(a,P),d=0;d<l;d++)c=a[d],ce.test(c.type||"")&&!Yt.access(c,"globalEval")&&Tt.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?Tt._evalUrl&&!c.noModule&&Tt._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):n(c.textContent.replace(ge,""),c,u))}return t}function L(t,e,n){for(var i,o=e?Tt.filter(e,t):t,s=0;null!=(i=o[s]);s++)n||1!==i.nodeType||Tt.cleanData(x(i)),i.parentNode&&(n&&ie(i)&&C(x(i,"script")),i.parentNode.removeChild(i));return t}function O(t,e,n){var i,o,s,r,a=ve.test(e),l=t.style;return n=n||ye(t),n&&(r=n.getPropertyValue(e)||n[e],a&&r&&(r=r.replace(At,"$1")||void 0),""!==r||ie(t)||(r=Tt.style(t,e)),!vt.pixelBoxStyles()&&me.test(r)&&_e.test(e)&&(i=l.width,o=l.minWidth,s=l.maxWidth,l.minWidth=l.maxWidth=l.width=r,r=n.width,l.width=i,l.minWidth=o,l.maxWidth=s)),void 0!==r?r+"":r}function M(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function H(t){for(var e=t[0].toUpperCase()+t.slice(1),n=we.length;n--;)if(t=we[n]+e,t in xe)return t}function R(t){var e=Tt.cssProps[t]||Ce[t];return e?e:t in xe?t:Ce[t]=H(t)||t}function F(t,e,n){var i=te.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function z(t,e,n,i,o,s){var r="width"===e?1:0,a=0,l=0,c=0;if(n===(i?"border":"content"))return 0;for(;r<4;r+=2)"margin"===n&&(c+=Tt.css(t,n+ee[r],!0,o)),i?("content"===n&&(l-=Tt.css(t,"padding"+ee[r],!0,o)),"margin"!==n&&(l-=Tt.css(t,"border"+ee[r]+"Width",!0,o))):(l+=Tt.css(t,"padding"+ee[r],!0,o),"padding"!==n?l+=Tt.css(t,"border"+ee[r]+"Width",!0,o):a+=Tt.css(t,"border"+ee[r]+"Width",!0,o));return!i&&s>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l+c}function q(t,e,n){var i=ye(t),o=!vt.boxSizingReliable()||n,r=o&&"border-box"===Tt.css(t,"boxSizing",!1,i),a=r,l=O(t,e,i),c="offset"+e[0].toUpperCase()+e.slice(1);if(me.test(l)){if(!n)return l;l="auto"}return(!vt.boxSizingReliable()&&r||!vt.reliableTrDimensions()&&s(t,"tr")||"auto"===l||!parseFloat(l)&&"inline"===Tt.css(t,"display",!1,i))&&t.getClientRects().length&&(r="border-box"===Tt.css(t,"boxSizing",!1,i),a=c in t,a&&(l=t[c])),l=parseFloat(l)||0,l+z(t,e,n||(r?"border":"content"),a,i,l)+"px"}function B(t,e,n,i,o){return new B.prototype.init(t,e,n,i,o)}function W(){ke&&(_t.hidden===!1&&t.requestAnimationFrame?t.requestAnimationFrame(W):t.setTimeout(W,Tt.fx.interval),Tt.fx.tick())}function X(){return t.setTimeout(function(){$e=void 0}),$e=Date.now()}function V(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)n=ee[i],o["margin"+n]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function Q(t,e,n){for(var i,o=(K.tweeners[e]||[]).concat(K.tweeners["*"]),s=0,r=o.length;s<r;s++)if(i=o[s].call(n,e,t))return i}function U(t,e,n){var i,o,s,r,a,l,c,u,d="width"in e||"height"in e,h=this,f={},p=t.style,g=t.nodeType&&se(t),m=Yt.get(t,"fxshow");n.queue||(r=Tt._queueHooks(t,"fx"),null==r.unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,Tt.queue(t,"fx").length||r.empty.fire()})}));for(i in e)if(o=e[i],Ae.test(o)){if(delete e[i],s=s||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||Tt.style(t,i)}if(l=!Tt.isEmptyObject(e),l||!Tt.isEmptyObject(f)){d&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],c=m&&m.display,null==c&&(c=Yt.get(t,"display")),u=Tt.css(t,"display"),"none"===u&&(c?u=c:(w([t],!0),c=t.style.display||c,u=Tt.css(t,"display"),w([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===Tt.css(t,"float")&&(l||(h.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1;for(i in f)l||(m?"hidden"in m&&(g=m.hidden):m=Yt.access(t,"fxshow",{display:c}),s&&(m.hidden=!g),g&&w([t],!0),h.done(function(){g||w([t]),Yt.remove(t,"fxshow");for(i in f)Tt.style(t,i,f[i])})),l=Q(g?m[i]:0,i,h),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function Y(t,e){var n,i,o,s,r;for(n in t)if(i=g(n),o=e[i],s=t[n],Array.isArray(s)&&(o=s[1],s=t[n]=s[0]),n!==i&&(t[i]=s,delete t[n]),r=Tt.cssHooks[i],r&&"expand"in r){s=r.expand(s),delete t[i];for(n in s)n in t||(t[n]=s[n],e[n]=o)}else e[i]=o}function K(t,e,n){var i,o,s=0,r=K.prefilters.length,a=Tt.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=$e||X(),n=Math.max(0,c.startTime+c.duration-e),i=n/c.duration||0,s=1-i,r=0,l=c.tweens.length;r<l;r++)c.tweens[r].run(s);return a.notifyWith(t,[c,s,n]),s<1&&l?n:(l||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:Tt.extend({},e),opts:Tt.extend(!0,{specialEasing:{},easing:Tt.easing._default},n),originalProperties:e,originalOptions:n,startTime:$e||X(),duration:n.duration,tweens:[],createTween:function(e,n){var i=Tt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(Y(u,c.opts.specialEasing);s<r;s++)if(i=K.prefilters[s].call(c,t,u,c.opts))return yt(i.stop)&&(Tt._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return Tt.map(u,Q,c),yt(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),Tt.fx.timer(Tt.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}function Z(t){var e=t.match(qt)||[];return e.join(" ")}function G(t){return t.getAttribute&&t.getAttribute("class")||""}function J(t){return Array.isArray(t)?t:"string"==typeof t?t.match(qt)||[]:[]}function tt(t,e,n,o){var s;if(Array.isArray(e))Tt.each(e,function(e,i){n||ze.test(t)?o(t,i):tt(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,o)});else if(n||"object"!==i(e))o(t,e);else for(s in e)tt(t+"["+s+"]",e[s],n,o)}function et(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,s=e.toLowerCase().match(qt)||[];if(yt(n))for(;i=s[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function nt(t,e,n,i){function o(a){var l;return s[a]=!0,Tt.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||r||s[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),o(c),!1)}),l}var s={},r=t===Je;return o(e.dataTypes[0])||!s["*"]&&o("*")}function it(t,e){var n,i,o=Tt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&Tt.extend(!0,t,i),t}function ot(t,e,n){for(var i,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)s=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}r||(r=o)}s=s||r}if(s)return s!==l[0]&&l.unshift(s),n[s]}function st(t,e,n,i){var o,s,r,a,l,c={},u=t.dataTypes.slice();if(u[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=u.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=u.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(r=c[l+" "+s]||c["* "+s],!r)for(o in c)if(a=o.split(" "),a[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){r===!0?r=c[o]:c[o]!==!0&&(s=a[0],u.unshift(a[1]));break}if(r!==!0)if(r&&t["throws"])e=r(e);else try{e=r(e)}catch(d){return{state:"parsererror",error:r?d:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}var rt=[],at=Object.getPrototypeOf,lt=rt.slice,ct=rt.flat?function(t){return rt.flat.call(t)}:function(t){return rt.concat.apply([],t)},ut=rt.push,dt=rt.indexOf,ht={},ft=ht.toString,pt=ht.hasOwnProperty,gt=pt.toString,mt=gt.call(Object),vt={},yt=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},bt=function(t){return null!=t&&t===t.window},_t=t.document,wt={type:!0,src:!0,nonce:!0,noModule:!0},xt="3.7.0",Ct=/HTML$/i,Tt=function(t,e){return new Tt.fn.init(t,e)};Tt.fn=Tt.prototype={jquery:xt,constructor:Tt,length:0,toArray:function(){return lt.call(this)},get:function(t){return null==t?lt.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=Tt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return Tt.each(this,t)},map:function(t){return this.pushStack(Tt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(lt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(Tt.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(Tt.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ut,sort:rt.sort,splice:rt.splice},Tt.extend=Tt.fn.extend=function(){var t,e,n,i,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||yt(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&r!==i&&(c&&i&&(Tt.isPlainObject(i)||(o=Array.isArray(i)))?(n=r[e],s=o&&!Array.isArray(n)?[]:o||Tt.isPlainObject(n)?n:{},o=!1,r[e]=Tt.extend(c,s,i)):void 0!==i&&(r[e]=i));return r},Tt.extend({expando:"jQuery"+(xt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==ft.call(t))&&(!(e=at(t))||(n=pt.call(e,"constructor")&&e.constructor,"function"==typeof n&&gt.call(n)===mt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){n(t,{nonce:e&&e.nonce},i)},each:function(t,e){var n,i=0;if(o(t))for(n=t.length;i<n&&e.call(t[i],i,t[i])!==!1;i++);else for(i in t)if(e.call(t[i],i,t[i])===!1)break;return t},text:function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o)return t.textContent;if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=Tt.text(e);return n},makeArray:function(t,e){var n=e||[];return null!=t&&(o(Object(t))?Tt.merge(n,"string"==typeof t?[t]:t):ut.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:dt.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!Ct.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i,o=[],s=0,r=t.length,a=!n;s<r;s++)i=!e(t[s],s),i!==a&&o.push(t[s]);return o},map:function(t,e,n){var i,s,r=0,a=[];if(o(t))for(i=t.length;r<i;r++)s=e(t[r],r,n),null!=s&&a.push(s);else for(r in t)s=e(t[r],r,n),null!=s&&a.push(s);return ct(a)},guid:1,support:vt}),"function"==typeof Symbol&&(Tt.fn[Symbol.iterator]=rt[Symbol.iterator]),Tt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){ht["[object "+e+"]"]=e.toLowerCase()});var Et=rt.pop,St=rt.sort,$t=rt.splice,kt="[\\x20\\t\\r\\n\\f]",At=new RegExp("^"+kt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+kt+"+$","g");Tt.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var Dt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;Tt.escapeSelector=function(t){return(t+"").replace(Dt,r)};var Pt=_t,jt=ut;!function(){function e(){try{return D.activeElement}catch(t){}}function n(t,e,i,o){var s,r,a,l,c,u,f,m=e&&e.ownerDocument,v=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==v&&9!==v&&11!==v)return i;if(!o&&(h(e),e=e||D,j)){if(11!==v&&(c=it.exec(t)))if(s=c[1]){if(9===v){if(!(a=e.getElementById(s)))return i;if(a.id===s)return L.call(i,a),i}else if(m&&(a=m.getElementById(s))&&n.contains(e,a)&&a.id===s)return L.call(i,a),i}else{if(c[2])return L.apply(i,e.getElementsByTagName(t)),i;if((s=c[3])&&e.getElementsByClassName)return L.apply(i,e.getElementsByClassName(s)),i}if(!(q[t+" "]||I&&I.test(t))){if(f=t,m=e,1===v&&(Z.test(t)||K.test(t))){for(m=ot.test(t)&&d(e.parentNode)||e,m==e&&vt.scope||((l=e.getAttribute("id"))?l=Tt.escapeSelector(l):e.setAttribute("id",l=O)),u=p(t),r=u.length;r--;)u[r]=(l?"#"+l:":scope")+" "+g(u[r]);f=u.join(",")}try{return L.apply(i,m.querySelectorAll(f)),i}catch(y){q(t,!0)}finally{l===O&&e.removeAttribute("id")}}}return T(t.replace(At,"$1"),e,i,o)}function i(){function t(n,i){return e.push(n+" ")>S.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function o(t){return t[O]=!0,t}function r(t){var e=D.createElement("fieldset");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function a(t){return function(e){return s(e,"input")&&e.type===t}}function l(t){return function(e){return(s(e,"input")||s(e,"button"))&&e.type===t}}function c(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ut(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return o(function(e){return e=+e,o(function(n,i){for(var o,s=t([],n.length,e),r=s.length;r--;)n[o=s[r]]&&(n[o]=!(i[o]=n[o]))})})}function d(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function h(t){var e,i=t?t.ownerDocument||t:Pt;return i!=D&&9===i.nodeType&&i.documentElement?(D=i,P=D.documentElement,j=!Tt.isXMLDoc(D),N=P.matches||P.webkitMatchesSelector||P.msMatchesSelector,Pt!=D&&(e=D.defaultView)&&e.top!==e&&e.addEventListener("unload",ct),vt.getById=r(function(t){return P.appendChild(t).id=Tt.expando,!D.getElementsByName||!D.getElementsByName(Tt.expando).length}),vt.disconnectedMatch=r(function(t){return N.call(t,"*")}),vt.scope=r(function(){return D.querySelectorAll(":scope")}),vt.cssHas=r(function(){try{return D.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}}),vt.getById?(S.filter.ID=function(t){var e=t.replace(st,at);return function(t){return t.getAttribute("id")===e}},S.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&j){var n=e.getElementById(t);return n?[n]:[]}}):(S.filter.ID=function(t){var e=t.replace(st,at);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},S.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&j){var n,i,o,s=e.getElementById(t);if(s){if(n=s.getAttributeNode("id"),n&&n.value===t)return[s];for(o=e.getElementsByName(t),i=0;s=o[i++];)if(n=s.getAttributeNode("id"),n&&n.value===t)return[s]}return[]}}),S.find.TAG=function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},S.find.CLASS=function(t,e){if("undefined"!=typeof e.getElementsByClassName&&j)return e.getElementsByClassName(t)},I=[],r(function(t){var e;P.appendChild(t).innerHTML="<a id='"+O+"' href='' disabled='disabled'></a><select id='"+O+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||I.push("\\["+kt+"*(?:value|"+W+")"),t.querySelectorAll("[id~="+O+"-]").length||I.push("~="),t.querySelectorAll("a#"+O+"+*").length||I.push(".#.+[+~]"),t.querySelectorAll(":checked").length||I.push(":checked"),e=D.createElement("input"),e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),P.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e=D.createElement("input"),e.setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||I.push("\\["+kt+"*name"+kt+"*="+kt+"*(?:''|\"\")")}),vt.cssHas||I.push(":has"),I=I.length&&new RegExp(I.join("|")),B=function(t,e){if(t===e)return A=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!vt.sortDetached&&e.compareDocumentPosition(t)===i?t===D||t.ownerDocument==Pt&&n.contains(Pt,t)?-1:e===D||e.ownerDocument==Pt&&n.contains(Pt,e)?1:k?dt.call(k,t)-dt.call(k,e):0:4&i?-1:1)},D):D}function f(){}function p(t,e){var i,o,s,r,a,l,c,u=F[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=S.preFilter;a;){i&&!(o=Y.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(s=[])),i=!1,(o=K.exec(a))&&(i=o.shift(),s.push({value:i,type:o[0].replace(At," ")}),a=a.slice(i.length));for(r in S.filter)!(o=tt[r].exec(a))||c[r]&&!(o=c[r](o))||(i=o.shift(),s.push({value:i,type:r,matches:o}),a=a.slice(i.length));if(!i)break}return e?a.length:a?n.error(t):F(t,l).slice(0)}function g(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function m(t,e,n){var i=e.dir,o=e.next,r=o||i,a=n&&"parentNode"===r,l=H++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||a)return t(e,n,o);return!1}:function(e,n,c){var u,d,h=[M,l];if(c){for(;e=e[i];)if((1===e.nodeType||a)&&t(e,n,c))return!0}else for(;e=e[i];)if(1===e.nodeType||a)if(d=e[O]||(e[O]={}),o&&s(e,o))e=e[i]||e;else{if((u=d[r])&&u[0]===M&&u[1]===l)return h[2]=u[2];if(d[r]=h,h[2]=t(e,n,c))return!0}return!1}}function v(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function y(t,e,i){for(var o=0,s=e.length;o<s;o++)n(t,e[o],i);return i}function b(t,e,n,i,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(n&&!n(s,i,o)||(r.push(s),c&&e.push(a)));return r}function _(t,e,n,i,s,r){return i&&!i[O]&&(i=_(i)),s&&!s[O]&&(s=_(s,r)),o(function(o,r,a,l){var c,u,d,h,f=[],p=[],g=r.length,m=o||y(e||"*",a.nodeType?[a]:a,[]),v=!t||!o&&e?m:b(m,f,t,a,l);if(n?(h=s||(o?t:g||i)?[]:r,n(v,h,a,l)):h=v,i)for(c=b(h,p),i(c,[],a,l),u=c.length;u--;)(d=c[u])&&(h[p[u]]=!(v[p[u]]=d));if(o){if(s||t){if(s){for(c=[],u=h.length;u--;)(d=h[u])&&c.push(v[u]=d);s(null,h=[],c,l)}for(u=h.length;u--;)(d=h[u])&&(c=s?dt.call(o,d):f[u])>-1&&(o[c]=!(r[c]=d))}}else h=b(h===r?h.splice(g,h.length):h),s?s(null,r,h,l):L.apply(r,h)})}function w(t){for(var e,n,i,o=t.length,s=S.relative[t[0].type],r=s||S.relative[" "],a=s?1:0,l=m(function(t){return t===e},r,!0),c=m(function(t){return dt.call(e,t)>-1},r,!0),u=[function(t,n,i){var o=!s&&(i||n!=$)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,o}];a<o;a++)if(n=S.relative[t[a].type])u=[m(v(u),n)];else{if(n=S.filter[t[a].type].apply(null,t[a].matches),n[O]){for(i=++a;i<o&&!S.relative[t[i].type];i++);return _(a>1&&v(u),a>1&&g(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(At,"$1"),n,a<i&&w(t.slice(a,i)),i<o&&w(t=t.slice(i)),i<o&&g(t))}u.push(n)}return v(u)}function x(t,e){var n=e.length>0,i=t.length>0,s=function(o,s,r,a,l){var c,u,d,f=0,p="0",g=o&&[],m=[],v=$,y=o||i&&S.find.TAG("*",l),_=M+=null==v?1:Math.random()||.1,w=y.length;for(l&&($=s==D||s||l);p!==w&&null!=(c=y[p]);p++){if(i&&c){for(u=0,s||c.ownerDocument==D||(h(c),r=!j);d=t[u++];)if(d(c,s||D,r)){L.call(a,c);break}l&&(M=_)}n&&((c=!d&&c)&&f--,o&&g.push(c))}if(f+=p,n&&p!==f){for(u=0;d=e[u++];)d(g,m,s,r);if(o){if(f>0)for(;p--;)g[p]||m[p]||(m[p]=Et.call(a));m=b(m)}L.apply(a,m),l&&!o&&m.length>0&&f+e.length>1&&Tt.uniqueSort(a)}return l&&(M=_,$=v),g};return n?o(s):s}function C(t,e){var n,i=[],o=[],s=z[t+" "];if(!s){for(e||(e=p(t)),n=e.length;n--;)s=w(e[n]),s[O]?i.push(s):o.push(s);s=z(t,x(o,i)),s.selector=t}return s}function T(t,e,n,i){var o,s,r,a,l,c="function"==typeof t&&t,u=!i&&p(t=c.selector||t);if(n=n||[],1===u.length){if(s=u[0]=u[0].slice(0),s.length>2&&"ID"===(r=s[0]).type&&9===e.nodeType&&j&&S.relative[s[1].type]){if(e=(S.find.ID(r.matches[0].replace(st,at),e)||[])[0],!e)return n;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=tt.needsContext.test(t)?0:s.length;o--&&(r=s[o],!S.relative[a=r.type]);)if((l=S.find[a])&&(i=l(r.matches[0].replace(st,at),ot.test(s[0].type)&&d(e.parentNode)||e))){if(s.splice(o,1),t=i.length&&g(s),!t)return L.apply(n,i),n;break}}return(c||C(t,u))(i,e,!j,n,!e||ot.test(t)&&d(e.parentNode)||e),n}var E,S,$,k,A,D,P,j,I,N,L=jt,O=Tt.expando,M=0,H=0,R=i(),F=i(),z=i(),q=i(),B=function(t,e){return t===e&&(A=!0),0},W="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",X="(?:\\\\[\\da-fA-F]{1,6}"+kt+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",V="\\["+kt+"*("+X+")(?:"+kt+"*([*^$|!~]?=)"+kt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+X+"))|)"+kt+"*\\]",Q=":("+X+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",U=new RegExp(kt+"+","g"),Y=new RegExp("^"+kt+"*,"+kt+"*"),K=new RegExp("^"+kt+"*([>+~]|"+kt+")"+kt+"*"),Z=new RegExp(kt+"|>"),G=new RegExp(Q),J=new RegExp("^"+X+"$"),tt={ID:new RegExp("^#("+X+")"),CLASS:new RegExp("^\\.("+X+")"),TAG:new RegExp("^("+X+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+Q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+kt+"*(even|odd|(([+-]|)(\\d*)n|)"+kt+"*(?:([+-]|)"+kt+"*(\\d+)|))"+kt+"*\\)|)","i"),bool:new RegExp("^(?:"+W+")$","i"),needsContext:new RegExp("^"+kt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+kt+"*((?:-\\d)?\\d*)"+kt+"*\\)|)(?=[^-]|$)","i")},et=/^(?:input|select|textarea|button)$/i,nt=/^h\d$/i,it=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ot=/[+~]/,st=new RegExp("\\\\[\\da-fA-F]{1,6}"+kt+"?|\\\\([^\\r\\n\\f])","g"),at=function(t,e){var n="0x"+t.slice(1)-65536;return e?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},ct=function(){h()},ut=m(function(t){return t.disabled===!0&&s(t,"fieldset")},{dir:"parentNode",next:"legend"});try{L.apply(rt=lt.call(Pt.childNodes),Pt.childNodes),rt[Pt.childNodes.length].nodeType}catch(ht){L={apply:function(t,e){jt.apply(t,lt.call(e))},call:function(t){jt.apply(t,lt.call(arguments,1))}}}n.matches=function(t,e){return n(t,null,null,e)},n.matchesSelector=function(t,e){if(h(t),j&&!q[e+" "]&&(!I||!I.test(e)))try{var i=N.call(t,e);if(i||vt.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(o){q(e,!0)}return n(e,D,null,[t]).length>0},n.contains=function(t,e){return(t.ownerDocument||t)!=D&&h(t),Tt.contains(t,e)},n.attr=function(t,e){(t.ownerDocument||t)!=D&&h(t);var n=S.attrHandle[e.toLowerCase()],i=n&&pt.call(S.attrHandle,e.toLowerCase())?n(t,e,!j):void 0;return void 0!==i?i:t.getAttribute(e)},n.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},Tt.uniqueSort=function(t){var e,n=[],i=0,o=0;if(A=!vt.sortStable,k=!vt.sortStable&&lt.call(t,0),St.call(t,B),A){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)$t.call(t,n[i],1)}return k=null,t},Tt.fn.uniqueSort=function(){return this.pushStack(Tt.uniqueSort(lt.apply(this)))},S=Tt.expr={cacheLength:50,createPseudo:o,match:tt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(st,at),t[3]=(t[3]||t[4]||t[5]||"").replace(st,at),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||n.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&n.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return tt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&G.test(n)&&(e=p(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(st,at).toLowerCase();return"*"===t?function(){return!0}:function(t){return s(t,e)}},CLASS:function(t){var e=R[t+" "];return e||(e=new RegExp("(^|"+kt+")"+t+"("+kt+"|$)"))&&R(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,i){return function(o){var s=n.attr(o,t);return null==s?"!="===e:!e||(s+="","="===e?s===i:"!="===e?s!==i:"^="===e?i&&0===s.indexOf(i):"*="===e?i&&s.indexOf(i)>-1:"$="===e?i&&s.slice(-i.length)===i:"~="===e?(" "+s.replace(U," ")+" ").indexOf(i)>-1:"|="===e&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),a="last"!==t.slice(-4),l="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,c){var u,d,h,f,p,g=r!==a?"nextSibling":"previousSibling",m=e.parentNode,v=l&&e.nodeName.toLowerCase(),y=!c&&!l,b=!1;if(m){if(r){for(;g;){for(h=e;h=h[g];)if(l?s(h,v):1===h.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&y){for(d=m[O]||(m[O]={}),u=d[t]||[],f=u[0]===M&&u[1],b=f&&u[2],h=f&&m.childNodes[f];h=++f&&h&&h[g]||(b=f=0)||p.pop();)if(1===h.nodeType&&++b&&h===e){d[t]=[M,f,b];break}}else if(y&&(d=e[O]||(e[O]={}),u=d[t]||[],f=u[0]===M&&u[1],b=f),b===!1)for(;(h=++f&&h&&h[g]||(b=f=0)||p.pop())&&((l?!s(h,v):1!==h.nodeType)||!++b||(y&&(d=h[O]||(h[O]={}),d[t]=[M,b]),h!==e)););return b-=o,b===i||b%i===0&&b/i>=0}}},PSEUDO:function(t,e){var i,s=S.pseudos[t]||S.setFilters[t.toLowerCase()]||n.error("unsupported pseudo: "+t);return s[O]?s(e):s.length>1?(i=[t,t,"",e],S.setFilters.hasOwnProperty(t.toLowerCase())?o(function(t,n){for(var i,o=s(t,e),r=o.length;r--;)i=dt.call(t,o[r]),t[i]=!(n[i]=o[r])}):function(t){return s(t,0,i)}):s}},pseudos:{not:o(function(t){var e=[],n=[],i=C(t.replace(At,"$1"));return i[O]?o(function(t,e,n,o){for(var s,r=i(t,null,o,[]),a=t.length;a--;)(s=r[a])&&(t[a]=!(e[a]=s))}):function(t,o,s){return e[0]=t,i(e,null,s,n),e[0]=null,!n.pop()}}),has:o(function(t){return function(e){return n(t,e).length>0}}),contains:o(function(t){return t=t.replace(st,at),function(e){return(e.textContent||Tt.text(e)).indexOf(t)>-1}}),lang:o(function(t){return J.test(t||"")||n.error("unsupported lang: "+t),t=t.replace(st,at).toLowerCase(),function(e){var n;do if(n=j?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);
return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===P},focus:function(t){return t===e()&&D.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(t){return s(t,"input")&&!!t.checked||s(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!S.pseudos.empty(t)},header:function(t){return nt.test(t.nodeName)},input:function(t){return et.test(t.nodeName)},button:function(t){return s(t,"input")&&"button"===t.type||s(t,"button")},text:function(t){var e;return s(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[n<0?n+e:n]}),even:u(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:u(function(t,e,n){var i;for(i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},S.pseudos.nth=S.pseudos.eq;for(E in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})S.pseudos[E]=a(E);for(E in{submit:!0,reset:!0})S.pseudos[E]=l(E);f.prototype=S.filters=S.pseudos,S.setFilters=new f,vt.sortStable=O.split("").sort(B).join("")===O,h(),vt.sortDetached=r(function(t){return 1&t.compareDocumentPosition(D.createElement("fieldset"))}),Tt.find=n,Tt.expr[":"]=Tt.expr.pseudos,Tt.unique=Tt.uniqueSort,n.compile=C,n.select=T,n.setDocument=h,n.escape=Tt.escapeSelector,n.getText=Tt.text,n.isXML=Tt.isXMLDoc,n.selectors=Tt.expr,n.support=Tt.support,n.uniqueSort=Tt.uniqueSort}();var It=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&Tt(t).is(n))break;i.push(t)}return i},Nt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},Lt=Tt.expr.match.needsContext,Ot=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;Tt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?Tt.find.matchesSelector(i,t)?[i]:[]:Tt.find.matches(t,Tt.grep(e,function(t){return 1===t.nodeType}))},Tt.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(Tt(t).filter(function(){for(e=0;e<i;e++)if(Tt.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)Tt.find(t,o[e],n);return i>1?Tt.uniqueSort(n):n},filter:function(t){return this.pushStack(a(this,t||[],!1))},not:function(t){return this.pushStack(a(this,t||[],!0))},is:function(t){return!!a(this,"string"==typeof t&&Lt.test(t)?Tt(t):t||[],!1).length}});var Mt,Ht=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Rt=Tt.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||Mt,"string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Ht.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof Tt?e[0]:e,Tt.merge(this,Tt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:_t,!0)),Ot.test(i[1])&&Tt.isPlainObject(e))for(i in e)yt(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return o=_t.getElementById(i[2]),o&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):yt(t)?void 0!==n.ready?n.ready(t):t(Tt):Tt.makeArray(t,this)};Rt.prototype=Tt.fn,Mt=Tt(_t);var Ft=/^(?:parents|prev(?:Until|All))/,zt={children:!0,contents:!0,next:!0,prev:!0};Tt.fn.extend({has:function(t){var e=Tt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(Tt.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,s=[],r="string"!=typeof t&&Tt(t);if(!Lt.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(r?r.index(n)>-1:1===n.nodeType&&Tt.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(s.length>1?Tt.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?dt.call(Tt(t),this[0]):dt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(Tt.uniqueSort(Tt.merge(this.get(),Tt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),Tt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return It(t,"parentNode")},parentsUntil:function(t,e,n){return It(t,"parentNode",n)},next:function(t){return l(t,"nextSibling")},prev:function(t){return l(t,"previousSibling")},nextAll:function(t){return It(t,"nextSibling")},prevAll:function(t){return It(t,"previousSibling")},nextUntil:function(t,e,n){return It(t,"nextSibling",n)},prevUntil:function(t,e,n){return It(t,"previousSibling",n)},siblings:function(t){return Nt((t.parentNode||{}).firstChild,t)},children:function(t){return Nt(t.firstChild)},contents:function(t){return null!=t.contentDocument&&at(t.contentDocument)?t.contentDocument:(s(t,"template")&&(t=t.content||t),Tt.merge([],t.childNodes))}},function(t,e){Tt.fn[t]=function(n,i){var o=Tt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=Tt.filter(i,o)),this.length>1&&(zt[t]||Tt.uniqueSort(o),Ft.test(t)&&o.reverse()),this.pushStack(o)}});var qt=/[^\x20\t\r\n\f]+/g;Tt.Callbacks=function(t){t="string"==typeof t?c(t):Tt.extend({},t);var e,n,o,s,r=[],a=[],l=-1,u=function(){for(s=s||t.once,o=e=!0;a.length;l=-1)for(n=a.shift();++l<r.length;)r[l].apply(n[0],n[1])===!1&&t.stopOnFalse&&(l=r.length,n=!1);t.memory||(n=!1),e=!1,s&&(r=n?[]:"")},d={add:function(){return r&&(n&&!e&&(l=r.length-1,a.push(n)),function o(e){Tt.each(e,function(e,n){yt(n)?t.unique&&d.has(n)||r.push(n):n&&n.length&&"string"!==i(n)&&o(n)})}(arguments),n&&!e&&u()),this},remove:function(){return Tt.each(arguments,function(t,e){for(var n;(n=Tt.inArray(e,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(t){return t?Tt.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return s=a=[],r=n="",this},disabled:function(){return!r},lock:function(){return s=a=[],n||e||(r=n=""),this},locked:function(){return!!s},fireWith:function(t,n){return s||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!o}};return d},Tt.extend({Deferred:function(e){var n=[["notify","progress",Tt.Callbacks("memory"),Tt.Callbacks("memory"),2],["resolve","done",Tt.Callbacks("once memory"),Tt.Callbacks("once memory"),0,"resolved"],["reject","fail",Tt.Callbacks("once memory"),Tt.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(t){return o.then(null,t)},pipe:function(){var t=arguments;return Tt.Deferred(function(e){Tt.each(n,function(n,i){var o=yt(t[i[4]])&&t[i[4]];s[i[1]](function(){var t=o&&o.apply(this,arguments);t&&yt(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[i[0]+"With"](this,o?[t]:arguments)})}),t=null}).promise()},then:function(e,i,o){function s(e,n,i,o){return function(){var a=this,l=arguments,c=function(){var t,c;if(!(e<r)){if(t=i.apply(a,l),t===n.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,yt(c)?o?c.call(t,s(r,n,u,o),s(r,n,d,o)):(r++,c.call(t,s(r,n,u,o),s(r,n,d,o),s(r,n,u,n.notifyWith))):(i!==u&&(a=void 0,l=[t]),(o||n.resolveWith)(a,l))}},h=o?c:function(){try{c()}catch(t){Tt.Deferred.exceptionHook&&Tt.Deferred.exceptionHook(t,h.error),e+1>=r&&(i!==d&&(a=void 0,l=[t]),n.rejectWith(a,l))}};e?h():(Tt.Deferred.getErrorHook?h.error=Tt.Deferred.getErrorHook():Tt.Deferred.getStackHook&&(h.error=Tt.Deferred.getStackHook()),t.setTimeout(h))}}var r=0;return Tt.Deferred(function(t){n[0][3].add(s(0,t,yt(o)?o:u,t.notifyWith)),n[1][3].add(s(0,t,yt(e)?e:u)),n[2][3].add(s(0,t,yt(i)?i:d))}).promise()},promise:function(t){return null!=t?Tt.extend(t,o):o}},s={};return Tt.each(n,function(t,e){var r=e[2],a=e[5];o[e[1]]=r.add,a&&r.add(function(){i=a},n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),r.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=r.fireWith}),o.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,n=e,i=Array(n),o=lt.call(arguments),s=Tt.Deferred(),r=function(t){return function(n){i[t]=this,o[t]=arguments.length>1?lt.call(arguments):n,--e||s.resolveWith(i,o)}};if(e<=1&&(h(t,s.done(r(n)).resolve,s.reject,!e),"pending"===s.state()||yt(o[n]&&o[n].then)))return s.then();for(;n--;)h(o[n],r(n),s.reject);return s.promise()}});var Bt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;Tt.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Bt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},Tt.readyException=function(e){t.setTimeout(function(){throw e})};var Wt=Tt.Deferred();Tt.fn.ready=function(t){return Wt.then(t)["catch"](function(t){Tt.readyException(t)}),this},Tt.extend({isReady:!1,readyWait:1,ready:function(t){(t===!0?--Tt.readyWait:Tt.isReady)||(Tt.isReady=!0,t!==!0&&--Tt.readyWait>0||Wt.resolveWith(_t,[Tt]))}}),Tt.ready.then=Wt.then,"complete"===_t.readyState||"loading"!==_t.readyState&&!_t.documentElement.doScroll?t.setTimeout(Tt.ready):(_t.addEventListener("DOMContentLoaded",f),t.addEventListener("load",f));var Xt=function(t,e,n,o,s,r,a){var l=0,c=t.length,u=null==n;if("object"===i(n)){s=!0;for(l in n)Xt(t,e,l,n[l],!0,r,a)}else if(void 0!==o&&(s=!0,yt(o)||(a=!0),u&&(a?(e.call(t,o),e=null):(u=e,e=function(t,e,n){return u.call(Tt(t),n)})),e))for(;l<c;l++)e(t[l],n,a?o:o.call(t[l],l,e(t[l],n)));return s?t:u?e.call(t):c?e(t[0],n):r},Vt=/^-ms-/,Qt=/-([a-z])/g,Ut=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};m.uid=1,m.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Ut(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[g(e)]=n;else for(i in e)o[g(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][g(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){Array.isArray(e)?e=e.map(g):(e=g(e),e=e in i?[e]:e.match(qt)||[]),n=e.length;for(;n--;)delete i[e[n]]}(void 0===e||Tt.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!Tt.isEmptyObject(e)}};var Yt=new m,Kt=new m,Zt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Gt=/[A-Z]/g;Tt.extend({hasData:function(t){return Kt.hasData(t)||Yt.hasData(t)},data:function(t,e,n){return Kt.access(t,e,n)},removeData:function(t,e){Kt.remove(t,e)},_data:function(t,e,n){return Yt.access(t,e,n)},_removeData:function(t,e){Yt.remove(t,e)}}),Tt.fn.extend({data:function(t,e){var n,i,o,s=this[0],r=s&&s.attributes;if(void 0===t){if(this.length&&(o=Kt.get(s),1===s.nodeType&&!Yt.get(s,"hasDataAttrs"))){for(n=r.length;n--;)r[n]&&(i=r[n].name,0===i.indexOf("data-")&&(i=g(i.slice(5)),y(s,i,o[i])));Yt.set(s,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){Kt.set(this,t)}):Xt(this,function(e){var n;if(s&&void 0===e){if(n=Kt.get(s,t),void 0!==n)return n;if(n=y(s,t),void 0!==n)return n}else this.each(function(){Kt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Kt.remove(this,t)})}}),Tt.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Yt.get(t,e),n&&(!i||Array.isArray(n)?i=Yt.access(t,e,Tt.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=Tt.queue(t,e),i=n.length,o=n.shift(),s=Tt._queueHooks(t,e),r=function(){Tt.dequeue(t,e)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete s.stop,o.call(t,r,s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Yt.get(t,n)||Yt.access(t,n,{empty:Tt.Callbacks("once memory").add(function(){Yt.remove(t,[e+"queue",n])})})}}),Tt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?Tt.queue(this[0],t):void 0===e?this:this.each(function(){var n=Tt.queue(this,t,e);Tt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&Tt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){Tt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=Tt.Deferred(),s=this,r=this.length,a=function(){--i||o.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)n=Yt.get(s[r],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var Jt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+Jt+")([a-z%]*)$","i"),ee=["Top","Right","Bottom","Left"],ne=_t.documentElement,ie=function(t){return Tt.contains(t.ownerDocument,t)},oe={composed:!0};ne.getRootNode&&(ie=function(t){return Tt.contains(t.ownerDocument,t)||t.getRootNode(oe)===t.ownerDocument});var se=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&ie(t)&&"none"===Tt.css(t,"display")},re={};Tt.fn.extend({show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){se(this)?Tt(this).show():Tt(this).hide()})}});var ae=/^(?:checkbox|radio)$/i,le=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ce=/^$|^module$|\/(?:java|ecma)script/i;!function(){var t=_t.createDocumentFragment(),e=t.appendChild(_t.createElement("div")),n=_t.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),vt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",vt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,e.innerHTML="<option></option>",vt.option=!!e.lastChild}();var ue={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ue.tbody=ue.tfoot=ue.colgroup=ue.caption=ue.thead,ue.th=ue.td,vt.option||(ue.optgroup=ue.option=[1,"<select multiple='multiple'>","</select>"]);var de=/<|&#?\w+;/,he=/^([^.]*)(?:\.(.+)|)/;Tt.event={global:{},add:function(t,e,n,i,o){var s,r,a,l,c,u,d,h,f,p,g,m=Yt.get(t);if(Ut(t))for(n.handler&&(s=n,n=s.handler,o=s.selector),o&&Tt.find.matchesSelector(ne,o),n.guid||(n.guid=Tt.guid++),(l=m.events)||(l=m.events=Object.create(null)),(r=m.handle)||(r=m.handle=function(e){return"undefined"!=typeof Tt&&Tt.event.triggered!==e.type?Tt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(qt)||[""],c=e.length;c--;)a=he.exec(e[c])||[],f=g=a[1],p=(a[2]||"").split(".").sort(),f&&(d=Tt.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=Tt.event.special[f]||{},u=Tt.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&Tt.expr.match.needsContext.test(o),namespace:p.join(".")},s),(h=l[f])||(h=l[f]=[],h.delegateCount=0,d.setup&&d.setup.call(t,i,p,r)!==!1||t.addEventListener&&t.addEventListener(f,r)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,u):h.push(u),Tt.event.global[f]=!0)},remove:function(t,e,n,i,o){var s,r,a,l,c,u,d,h,f,p,g,m=Yt.hasData(t)&&Yt.get(t);if(m&&(l=m.events)){for(e=(e||"").match(qt)||[""],c=e.length;c--;)if(a=he.exec(e[c])||[],f=g=a[1],p=(a[2]||"").split(".").sort(),f){for(d=Tt.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,h=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=h.length;s--;)u=h[s],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(h.splice(s,1),u.selector&&h.delegateCount--,d.remove&&d.remove.call(t,u));r&&!h.length&&(d.teardown&&d.teardown.call(t,p,m.handle)!==!1||Tt.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)Tt.event.remove(t,f+e[c],n,i,!0);Tt.isEmptyObject(l)&&Yt.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,s,r,a=new Array(arguments.length),l=Tt.event.fix(t),c=(Yt.get(this,"events")||Object.create(null))[l.type]||[],u=Tt.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,l)!==!1){for(r=Tt.event.handlers.call(this,l,c),e=0;(o=r[e++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(s=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&s.namespace!==!1&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,i=((Tt.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,a),void 0!==i&&(l.result=i)===!1&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,i,o,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||c.disabled!==!0)){for(s=[],r={},n=0;n<l;n++)i=e[n],o=i.selector+" ",void 0===r[o]&&(r[o]=i.needsContext?Tt(o,this).index(c)>-1:Tt.find(o,this,null,[c]).length),r[o]&&s.push(i);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(Tt.Event.prototype,t,{enumerable:!0,configurable:!0,get:yt(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[Tt.expando]?t:new Tt.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return ae.test(e.type)&&e.click&&s(e,"input")&&k(e,"click",!0),!1},trigger:function(t){var e=this||t;return ae.test(e.type)&&e.click&&s(e,"input")&&k(e,"click"),!0},_default:function(t){var e=t.target;return ae.test(e.type)&&e.click&&s(e,"input")&&Yt.get(e,"click")||s(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},Tt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},Tt.Event=function(t,e){return this instanceof Tt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?E:S,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&Tt.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),void(this[Tt.expando]=!0)):new Tt.Event(t,e)},Tt.Event.prototype={constructor:Tt.Event,isDefaultPrevented:S,isPropagationStopped:S,isImmediatePropagationStopped:S,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=E,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=E,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=E,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},Tt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},Tt.event.addProp),Tt.each({focus:"focusin",blur:"focusout"},function(t,e){function n(t){if(_t.documentMode){var n=Yt.get(this,"handle"),i=Tt.event.fix(t);i.type="focusin"===t.type?"focus":"blur",i.isSimulated=!0,n(t),i.target===i.currentTarget&&n(i)}else Tt.event.simulate(e,t.target,Tt.event.fix(t))}Tt.event.special[t]={setup:function(){var i;return k(this,t,!0),!!_t.documentMode&&(i=Yt.get(this,e),i||this.addEventListener(e,n),Yt.set(this,e,(i||0)+1),void 0)},trigger:function(){return k(this,t),!0},teardown:function(){var t;return!!_t.documentMode&&(t=Yt.get(this,e)-1,void(t?Yt.set(this,e,t):(this.removeEventListener(e,n),Yt.remove(this,e))))},_default:function(e){return Yt.get(e.target,t)},delegateType:e},Tt.event.special[e]={setup:function(){var i=this.ownerDocument||this.document||this,o=_t.documentMode?this:i,s=Yt.get(o,e);s||(_t.documentMode?this.addEventListener(e,n):i.addEventListener(t,n,!0)),Yt.set(o,e,(s||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=_t.documentMode?this:i,s=Yt.get(o,e)-1;s?Yt.set(o,e,s):(_t.documentMode?this.removeEventListener(e,n):i.removeEventListener(t,n,!0),Yt.remove(o,e))}}}),Tt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){Tt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,s=t.handleObj;return o&&(o===i||Tt.contains(i,o))||(t.type=s.origType,n=s.handler.apply(this,arguments),t.type=e),n}}}),Tt.fn.extend({on:function(t,e,n,i){return $(this,t,e,n,i)},one:function(t,e,n,i){return $(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,Tt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=S),this.each(function(){Tt.event.remove(this,t,n,e)})}});var fe=/<script|<style|<link/i,pe=/checked\s*(?:[^=]|=\s*.checked.)/i,ge=/^\s*<!\[CDATA\[|\]\]>\s*$/g;Tt.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,o,s,r,a=t.cloneNode(!0),l=ie(t);if(!(vt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||Tt.isXMLDoc(t)))for(r=x(a),s=x(t),i=0,o=s.length;i<o;i++)I(s[i],r[i]);if(e)if(n)for(s=s||x(t),r=r||x(a),i=0,o=s.length;i<o;i++)j(s[i],r[i]);else j(t,a);return r=x(a,"script"),r.length>0&&C(r,!l&&x(t,"script")),a},cleanData:function(t){for(var e,n,i,o=Tt.event.special,s=0;void 0!==(n=t[s]);s++)if(Ut(n)){if(e=n[Yt.expando]){if(e.events)for(i in e.events)o[i]?Tt.event.remove(n,i):Tt.removeEvent(n,i,e.handle);n[Yt.expando]=void 0}n[Kt.expando]&&(n[Kt.expando]=void 0)}}}),Tt.fn.extend({detach:function(t){return L(this,t,!0)},remove:function(t){return L(this,t)},text:function(t){return Xt(this,function(t){return void 0===t?Tt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return N(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=A(this,t);e.appendChild(t)}})},prepend:function(){return N(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=A(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return N(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return N(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(Tt.cleanData(x(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return Tt.clone(this,t,e)})},html:function(t){return Xt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!fe.test(t)&&!ue[(le.exec(t)||["",""])[1].toLowerCase()]){t=Tt.htmlPrefilter(t);try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(Tt.cleanData(x(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return N(this,arguments,function(e){var n=this.parentNode;Tt.inArray(this,t)<0&&(Tt.cleanData(x(this)),n&&n.replaceChild(e,this))},t)}}),Tt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){Tt.fn[t]=function(t){for(var n,i=[],o=Tt(t),s=o.length-1,r=0;r<=s;r++)n=r===s?this:this.clone(!0),Tt(o[r])[e](n),ut.apply(i,n.get());return this.pushStack(i)}});var me=new RegExp("^("+Jt+")(?!px)[a-z%]+$","i"),ve=/^--/,ye=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},be=function(t,e,n){var i,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];i=n.call(t);for(o in e)t.style[o]=s[o];return i},_e=new RegExp(ee.join("|"),"i");!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(c).appendChild(u);var e=t.getComputedStyle(u);i="1%"!==e.top,l=12===n(e.marginLeft),u.style.right="60%",r=36===n(e.right),o=36===n(e.width),u.style.position="absolute",s=12===n(u.offsetWidth/3),ne.removeChild(c),u=null}}function n(t){return Math.round(parseFloat(t))}var i,o,s,r,a,l,c=_t.createElement("div"),u=_t.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",vt.clearCloneStyle="content-box"===u.style.backgroundClip,Tt.extend(vt,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),r},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),s},reliableTrDimensions:function(){var e,n,i,o;return null==a&&(e=_t.createElement("table"),n=_t.createElement("tr"),i=_t.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="border:1px solid",n.style.height="1px",i.style.height="9px",i.style.display="block",ne.appendChild(e).appendChild(n).appendChild(i),o=t.getComputedStyle(n),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===n.offsetHeight,ne.removeChild(e)),a}}))}();var we=["Webkit","Moz","ms"],xe=_t.createElement("div").style,Ce={},Te=/^(none|table(?!-c[ea]).+)/,Ee={position:"absolute",visibility:"hidden",display:"block"},Se={letterSpacing:"0",fontWeight:"400"};Tt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=O(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=g(e),l=ve.test(e),c=t.style;return l||(e=R(a)),r=Tt.cssHooks[e]||Tt.cssHooks[a],void 0===n?r&&"get"in r&&void 0!==(o=r.get(t,!1,i))?o:c[e]:(s=typeof n,"string"===s&&(o=te.exec(n))&&o[1]&&(n=b(t,e,o),s="number"),null!=n&&n===n&&("number"!==s||l||(n+=o&&o[3]||(Tt.cssNumber[a]?"":"px")),vt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(n=r.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n)),void 0)}},css:function(t,e,n,i){var o,s,r,a=g(e),l=ve.test(e);return l||(e=R(a)),r=Tt.cssHooks[e]||Tt.cssHooks[a],r&&"get"in r&&(o=r.get(t,!0,n)),void 0===o&&(o=O(t,e,i)),"normal"===o&&e in Se&&(o=Se[e]),""===n||n?(s=parseFloat(o),n===!0||isFinite(s)?s||0:o):o}}),Tt.each(["height","width"],function(t,e){Tt.cssHooks[e]={get:function(t,n,i){if(n)return!Te.test(Tt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?q(t,e,i):be(t,Ee,function(){return q(t,e,i)})},set:function(t,n,i){var o,s=ye(t),r=!vt.scrollboxSize()&&"absolute"===s.position,a=r||i,l=a&&"border-box"===Tt.css(t,"boxSizing",!1,s),c=i?z(t,e,i,l,s):0;return l&&r&&(c-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(s[e])-z(t,e,"border",!1,s)-.5)),c&&(o=te.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=Tt.css(t,e)),F(t,n,c)}}}),Tt.cssHooks.marginLeft=M(vt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(O(t,"marginLeft"))||t.getBoundingClientRect().left-be(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),Tt.each({margin:"",padding:"",border:"Width"},function(t,e){Tt.cssHooks[t+e]={expand:function(n){for(var i=0,o={},s="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+ee[i]+e]=s[i]||s[i-2]||s[0];return o}},"margin"!==t&&(Tt.cssHooks[t+e].set=F)}),Tt.fn.extend({css:function(t,e){return Xt(this,function(t,e,n){var i,o,s={},r=0;if(Array.isArray(e)){for(i=ye(t),o=e.length;r<o;r++)s[e[r]]=Tt.css(t,e[r],!1,i);return s}return void 0!==n?Tt.style(t,e,n):Tt.css(t,e)},t,e,arguments.length>1)}}),Tt.Tween=B,B.prototype={constructor:B,init:function(t,e,n,i,o,s){this.elem=t,this.prop=n,this.easing=o||Tt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(Tt.cssNumber[n]?"":"px")},cur:function(){var t=B.propHooks[this.prop];return t&&t.get?t.get(this):B.propHooks._default.get(this)},run:function(t){var e,n=B.propHooks[this.prop];return this.options.duration?this.pos=e=Tt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=Tt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){Tt.fx.step[t.prop]?Tt.fx.step[t.prop](t):1!==t.elem.nodeType||!Tt.cssHooks[t.prop]&&null==t.elem.style[R(t.prop)]?t.elem[t.prop]=t.now:Tt.style(t.elem,t.prop,t.now+t.unit)}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},Tt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},Tt.fx=B.prototype.init,Tt.fx.step={};var $e,ke,Ae=/^(?:toggle|show|hide)$/,De=/queueHooks$/;Tt.Animation=Tt.extend(K,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return b(n.elem,t,te.exec(e),n),n}]},tweener:function(t,e){yt(t)?(e=t,t=["*"]):t=t.match(qt);for(var n,i=0,o=t.length;i<o;i++)n=t[i],K.tweeners[n]=K.tweeners[n]||[],K.tweeners[n].unshift(e)},prefilters:[U],prefilter:function(t,e){e?K.prefilters.unshift(t):K.prefilters.push(t)}}),Tt.speed=function(t,e,n){var i=t&&"object"==typeof t?Tt.extend({},t):{complete:n||!n&&e||yt(t)&&t,duration:t,easing:n&&e||e&&!yt(e)&&e};return Tt.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in Tt.fx.speeds?i.duration=Tt.fx.speeds[i.duration]:i.duration=Tt.fx.speeds._default),null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){yt(i.old)&&i.old.call(this),i.queue&&Tt.dequeue(this,i.queue)},i},Tt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=Tt.isEmptyObject(t),s=Tt.speed(e,n,i),r=function(){var e=K(this,Tt.extend({},t),s);(o||Yt.get(this,"finish"))&&e.stop(!0)};return r.finish=r,o||s.queue===!1?this.each(r):this.queue(s.queue,r)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",s=Tt.timers,r=Yt.get(this);if(o)r[o]&&r[o].stop&&i(r[o]);else for(o in r)r[o]&&r[o].stop&&De.test(o)&&i(r[o]);for(o=s.length;o--;)s[o].elem!==this||null!=t&&s[o].queue!==t||(s[o].anim.stop(n),
e=!1,s.splice(o,1));!e&&n||Tt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=Yt.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],s=Tt.timers,r=i?i.length:0;for(n.finish=!0,Tt.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<r;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),Tt.each(["toggle","show","hide"],function(t,e){var n=Tt.fn[e];Tt.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(V(e,!0),t,i,o)}}),Tt.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){Tt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),Tt.timers=[],Tt.fx.tick=function(){var t,e=0,n=Tt.timers;for($e=Date.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||Tt.fx.stop(),$e=void 0},Tt.fx.timer=function(t){Tt.timers.push(t),Tt.fx.start()},Tt.fx.interval=13,Tt.fx.start=function(){ke||(ke=!0,W())},Tt.fx.stop=function(){ke=null},Tt.fx.speeds={slow:600,fast:200,_default:400},Tt.fn.delay=function(e,n){return e=Tt.fx?Tt.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})},function(){var t=_t.createElement("input"),e=_t.createElement("select"),n=e.appendChild(_t.createElement("option"));t.type="checkbox",vt.checkOn=""!==t.value,vt.optSelected=n.selected,t=_t.createElement("input"),t.value="t",t.type="radio",vt.radioValue="t"===t.value}();var Pe,je=Tt.expr.attrHandle;Tt.fn.extend({attr:function(t,e){return Xt(this,Tt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){Tt.removeAttr(this,t)})}}),Tt.extend({attr:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?Tt.prop(t,e,n):(1===s&&Tt.isXMLDoc(t)||(o=Tt.attrHooks[e.toLowerCase()]||(Tt.expr.match.bool.test(e)?Pe:void 0)),void 0!==n?null===n?void Tt.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:(i=Tt.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!vt.radioValue&&"radio"===e&&s(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(qt);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),Pe={set:function(t,e,n){return e===!1?Tt.removeAttr(t,n):t.setAttribute(n,n),n}},Tt.each(Tt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=je[e]||Tt.find.attr;je[e]=function(t,e,i){var o,s,r=e.toLowerCase();return i||(s=je[r],je[r]=o,o=null!=n(t,e,i)?r:null,je[r]=s),o}});var Ie=/^(?:input|select|textarea|button)$/i,Ne=/^(?:a|area)$/i;Tt.fn.extend({prop:function(t,e){return Xt(this,Tt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[Tt.propFix[t]||t]})}}),Tt.extend({prop:function(t,e,n){var i,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&Tt.isXMLDoc(t)||(e=Tt.propFix[e]||e,o=Tt.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=Tt.find.attr(t,"tabindex");return e?parseInt(e,10):Ie.test(t.nodeName)||Ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),vt.optSelected||(Tt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),Tt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Tt.propFix[this.toLowerCase()]=this}),Tt.fn.extend({addClass:function(t){var e,n,i,o,s,r;return yt(t)?this.each(function(e){Tt(this).addClass(t.call(this,e,G(this)))}):(e=J(t),e.length?this.each(function(){if(i=G(this),n=1===this.nodeType&&" "+Z(i)+" "){for(s=0;s<e.length;s++)o=e[s],n.indexOf(" "+o+" ")<0&&(n+=o+" ");r=Z(n),i!==r&&this.setAttribute("class",r)}}):this)},removeClass:function(t){var e,n,i,o,s,r;return yt(t)?this.each(function(e){Tt(this).removeClass(t.call(this,e,G(this)))}):arguments.length?(e=J(t),e.length?this.each(function(){if(i=G(this),n=1===this.nodeType&&" "+Z(i)+" "){for(s=0;s<e.length;s++)for(o=e[s];n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");r=Z(n),i!==r&&this.setAttribute("class",r)}}):this):this.attr("class","")},toggleClass:function(t,e){var n,i,o,s,r=typeof t,a="string"===r||Array.isArray(t);return yt(t)?this.each(function(n){Tt(this).toggleClass(t.call(this,n,G(this),e),e)}):"boolean"==typeof e&&a?e?this.addClass(t):this.removeClass(t):(n=J(t),this.each(function(){if(a)for(s=Tt(this),o=0;o<n.length;o++)i=n[o],s.hasClass(i)?s.removeClass(i):s.addClass(i);else void 0!==t&&"boolean"!==r||(i=G(this),i&&Yt.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",i||t===!1?"":Yt.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+Z(G(n))+" ").indexOf(e)>-1)return!0;return!1}});var Le=/\r/g;Tt.fn.extend({val:function(t){var e,n,i,o=this[0];{if(arguments.length)return i=yt(t),this.each(function(n){var o;1===this.nodeType&&(o=i?t.call(this,n,Tt(this).val()):t,null==o?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=Tt.map(o,function(t){return null==t?"":t+""})),e=Tt.valHooks[this.type]||Tt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return e=Tt.valHooks[o.type]||Tt.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(Le,""):null==n?"":n)}}}),Tt.extend({valHooks:{option:{get:function(t){var e=Tt.find.attr(t,"value");return null!=e?e:Z(Tt.text(t))}},select:{get:function(t){var e,n,i,o=t.options,r=t.selectedIndex,a="select-one"===t.type,l=a?null:[],c=a?r+1:o.length;for(i=r<0?c:a?r:0;i<c;i++)if(n=o[i],(n.selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!s(n.parentNode,"optgroup"))){if(e=Tt(n).val(),a)return e;l.push(e)}return l},set:function(t,e){for(var n,i,o=t.options,s=Tt.makeArray(e),r=o.length;r--;)i=o[r],(i.selected=Tt.inArray(Tt.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(t.selectedIndex=-1),s}}}}),Tt.each(["radio","checkbox"],function(){Tt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=Tt.inArray(Tt(t).val(),e)>-1}},vt.checkOn||(Tt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Oe=t.location,Me={guid:Date.now()},He=/\?/;Tt.parseXML=function(e){var n,i;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(o){}return i=n&&n.getElementsByTagName("parsererror")[0],n&&!i||Tt.error("Invalid XML: "+(i?Tt.map(i.childNodes,function(t){return t.textContent}).join("\n"):e)),n};var Re=/^(?:focusinfocus|focusoutblur)$/,Fe=function(t){t.stopPropagation()};Tt.extend(Tt.event,{trigger:function(e,n,i,o){var s,r,a,l,c,u,d,h,f=[i||_t],p=pt.call(e,"type")?e.type:e,g=pt.call(e,"namespace")?e.namespace.split("."):[];if(r=h=a=i=i||_t,3!==i.nodeType&&8!==i.nodeType&&!Re.test(p+Tt.event.triggered)&&(p.indexOf(".")>-1&&(g=p.split("."),p=g.shift(),g.sort()),c=p.indexOf(":")<0&&"on"+p,e=e[Tt.expando]?e:new Tt.Event(p,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:Tt.makeArray(n,[e]),d=Tt.event.special[p]||{},o||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!o&&!d.noBubble&&!bt(i)){for(l=d.delegateType||p,Re.test(l+p)||(r=r.parentNode);r;r=r.parentNode)f.push(r),a=r;a===(i.ownerDocument||_t)&&f.push(a.defaultView||a.parentWindow||t)}for(s=0;(r=f[s++])&&!e.isPropagationStopped();)h=r,e.type=s>1?l:d.bindType||p,u=(Yt.get(r,"events")||Object.create(null))[e.type]&&Yt.get(r,"handle"),u&&u.apply(r,n),u=c&&r[c],u&&u.apply&&Ut(r)&&(e.result=u.apply(r,n),e.result===!1&&e.preventDefault());return e.type=p,o||e.isDefaultPrevented()||d._default&&d._default.apply(f.pop(),n)!==!1||!Ut(i)||c&&yt(i[p])&&!bt(i)&&(a=i[c],a&&(i[c]=null),Tt.event.triggered=p,e.isPropagationStopped()&&h.addEventListener(p,Fe),i[p](),e.isPropagationStopped()&&h.removeEventListener(p,Fe),Tt.event.triggered=void 0,a&&(i[c]=a)),e.result}},simulate:function(t,e,n){var i=Tt.extend(new Tt.Event,n,{type:t,isSimulated:!0});Tt.event.trigger(i,null,e)}}),Tt.fn.extend({trigger:function(t,e){return this.each(function(){Tt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return Tt.event.trigger(t,e,n,!0)}});var ze=/\[\]$/,qe=/\r?\n/g,Be=/^(?:submit|button|image|reset|file)$/i,We=/^(?:input|select|textarea|keygen)/i;Tt.param=function(t,e){var n,i=[],o=function(t,e){var n=yt(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!Tt.isPlainObject(t))Tt.each(t,function(){o(this.name,this.value)});else for(n in t)tt(n,t[n],e,o);return i.join("&")},Tt.fn.extend({serialize:function(){return Tt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=Tt.prop(this,"elements");return t?Tt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!Tt(this).is(":disabled")&&We.test(this.nodeName)&&!Be.test(t)&&(this.checked||!ae.test(t))}).map(function(t,e){var n=Tt(this).val();return null==n?null:Array.isArray(n)?Tt.map(n,function(t){return{name:e.name,value:t.replace(qe,"\r\n")}}):{name:e.name,value:n.replace(qe,"\r\n")}}).get()}});var Xe=/%20/g,Ve=/#.*$/,Qe=/([?&])_=[^&]*/,Ue=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ye=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ke=/^(?:GET|HEAD)$/,Ze=/^\/\//,Ge={},Je={},tn="*/".concat("*"),en=_t.createElement("a");en.href=Oe.href,Tt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Oe.href,type:"GET",isLocal:Ye.test(Oe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":tn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":Tt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?it(it(t,Tt.ajaxSettings),e):it(Tt.ajaxSettings,t)},ajaxPrefilter:et(Ge),ajaxTransport:et(Je),ajax:function(e,n){function i(e,n,i,a){var c,h,f,_,w,x=n;u||(u=!0,l&&t.clearTimeout(l),o=void 0,r=a||"",C.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(_=ot(p,C,i)),!c&&Tt.inArray("script",p.dataTypes)>-1&&Tt.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),_=st(p,_,C,c),c?(p.ifModified&&(w=C.getResponseHeader("Last-Modified"),w&&(Tt.lastModified[s]=w),w=C.getResponseHeader("etag"),w&&(Tt.etag[s]=w)),204===e||"HEAD"===p.type?x="nocontent":304===e?x="notmodified":(x=_.state,h=_.data,f=_.error,c=!f)):(f=x,!e&&x||(x="error",e<0&&(e=0))),C.status=e,C.statusText=(n||x)+"",c?v.resolveWith(g,[h,x,C]):v.rejectWith(g,[C,x,f]),C.statusCode(b),b=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,p,c?h:f]),y.fireWith(g,[C,x]),d&&(m.trigger("ajaxComplete",[C,p]),--Tt.active||Tt.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var o,s,r,a,l,c,u,d,h,f,p=Tt.ajaxSetup({},n),g=p.context||p,m=p.context&&(g.nodeType||g.jquery)?Tt(g):Tt.event,v=Tt.Deferred(),y=Tt.Callbacks("once memory"),b=p.statusCode||{},_={},w={},x="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=Ue.exec(r);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return u?r:null},setRequestHeader:function(t,e){return null==u&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==u&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)C.always(t[C.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||x;return o&&o.abort(e),i(0,e),this}};if(v.promise(C),p.url=((e||p.url||Oe.href)+"").replace(Ze,Oe.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(qt)||[""],null==p.crossDomain){c=_t.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=en.protocol+"//"+en.host!=c.protocol+"//"+c.host}catch(T){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=Tt.param(p.data,p.traditional)),nt(Ge,p,n,C),u)return C;d=Tt.event&&p.global,d&&0===Tt.active++&&Tt.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ke.test(p.type),s=p.url.replace(Ve,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Xe,"+")):(f=p.url.slice(s.length),p.data&&(p.processData||"string"==typeof p.data)&&(s+=(He.test(s)?"&":"?")+p.data,delete p.data),p.cache===!1&&(s=s.replace(Qe,"$1"),f=(He.test(s)?"&":"?")+"_="+Me.guid++ +f),p.url=s+f),p.ifModified&&(Tt.lastModified[s]&&C.setRequestHeader("If-Modified-Since",Tt.lastModified[s]),Tt.etag[s]&&C.setRequestHeader("If-None-Match",Tt.etag[s])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",p.contentType),C.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+tn+"; q=0.01":""):p.accepts["*"]);for(h in p.headers)C.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(p.beforeSend.call(g,C,p)===!1||u))return C.abort();if(x="abort",y.add(p.complete),C.done(p.success),C.fail(p.error),o=nt(Je,p,n,C)){if(C.readyState=1,d&&m.trigger("ajaxSend",[C,p]),u)return C;p.async&&p.timeout>0&&(l=t.setTimeout(function(){C.abort("timeout")},p.timeout));try{u=!1,o.send(_,i)}catch(T){if(u)throw T;i(-1,T)}}else i(-1,"No Transport");return C},getJSON:function(t,e,n){return Tt.get(t,e,n,"json")},getScript:function(t,e){return Tt.get(t,void 0,e,"script")}}),Tt.each(["get","post"],function(t,e){Tt[e]=function(t,n,i,o){return yt(n)&&(o=o||i,i=n,n=void 0),Tt.ajax(Tt.extend({url:t,type:e,dataType:o,data:n,success:i},Tt.isPlainObject(t)&&t))}}),Tt.ajaxPrefilter(function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),Tt._evalUrl=function(t,e,n){return Tt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){Tt.globalEval(t,e,n)}})},Tt.fn.extend({wrapAll:function(t){var e;return this[0]&&(yt(t)&&(t=t.call(this[0])),e=Tt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return yt(t)?this.each(function(e){Tt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=Tt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=yt(t);return this.each(function(n){Tt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){Tt(this).replaceWith(this.childNodes)}),this}}),Tt.expr.pseudos.hidden=function(t){return!Tt.expr.pseudos.visible(t)},Tt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},Tt.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var nn={0:200,1223:204},on=Tt.ajaxSettings.xhr();vt.cors=!!on&&"withCredentials"in on,vt.ajax=on=!!on,Tt.ajaxTransport(function(e){var n,i;if(vt.cors||on&&!e.crossDomain)return{send:function(o,s){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(r in o)a.setRequestHeader(r,o[r]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(nn[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=a.ontimeout=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(l){if(n)throw l}},abort:function(){n&&n()}}}),Tt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),Tt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return Tt.globalEval(t),t}}}),Tt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),Tt.ajaxTransport("script",function(t){if(t.crossDomain||t.scriptAttrs){var e,n;return{send:function(i,o){e=Tt("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),_t.head.appendChild(e[0])},abort:function(){n&&n()}}}});var sn=[],rn=/(=)\?(?=&|$)|\?\?/;Tt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=sn.pop()||Tt.expando+"_"+Me.guid++;return this[t]=!0,t}}),Tt.ajaxPrefilter("json jsonp",function(e,n,i){var o,s,r,a=e.jsonp!==!1&&(rn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&rn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=yt(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(rn,"$1"+o):e.jsonp!==!1&&(e.url+=(He.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||Tt.error(o+" was not called"),r[0]},e.dataTypes[0]="json",s=t[o],t[o]=function(){r=arguments},i.always(function(){void 0===s?Tt(t).removeProp(o):t[o]=s,e[o]&&(e.jsonpCallback=n.jsonpCallback,sn.push(o)),r&&yt(s)&&s(r[0]),r=s=void 0}),"script"}),vt.createHTMLDocument=function(){var t=_t.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),Tt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var i,o,s;return e||(vt.createHTMLDocument?(e=_t.implementation.createHTMLDocument(""),i=e.createElement("base"),i.href=_t.location.href,e.head.appendChild(i)):e=_t),o=Ot.exec(t),s=!n&&[],o?[e.createElement(o[1])]:(o=T([t],e,s),s&&s.length&&Tt(s).remove(),Tt.merge([],o.childNodes))},Tt.fn.load=function(t,e,n){var i,o,s,r=this,a=t.indexOf(" ");return a>-1&&(i=Z(t.slice(a)),t=t.slice(0,a)),yt(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),r.length>0&&Tt.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(i?Tt("<div>").append(Tt.parseHTML(t)).find(i):t)}).always(n&&function(t,e){r.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},Tt.expr.pseudos.animated=function(t){return Tt.grep(Tt.timers,function(e){return t===e.elem}).length},Tt.offset={setOffset:function(t,e,n){var i,o,s,r,a,l,c,u=Tt.css(t,"position"),d=Tt(t),h={};"static"===u&&(t.style.position="relative"),a=d.offset(),s=Tt.css(t,"top"),l=Tt.css(t,"left"),c=("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1,c?(i=d.position(),r=i.top,o=i.left):(r=parseFloat(s)||0,o=parseFloat(l)||0),yt(e)&&(e=e.call(t,n,Tt.extend({},a))),null!=e.top&&(h.top=e.top-a.top+r),null!=e.left&&(h.left=e.left-a.left+o),"using"in e?e.using.call(t,h):d.css(h)}},Tt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){Tt.offset.setOffset(this,t,e)});var e,n,i=this[0];if(i)return i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===Tt.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===Tt.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&(o=Tt(t).offset(),o.top+=Tt.css(t,"borderTopWidth",!0),o.left+=Tt.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-Tt.css(i,"marginTop",!0),left:e.left-o.left-Tt.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===Tt.css(t,"position");)t=t.offsetParent;return t||ne})}}),Tt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;Tt.fn[t]=function(i){return Xt(this,function(t,i,o){var s;return bt(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===o?s?s[e]:t[i]:void(s?s.scrollTo(n?s.pageXOffset:o,n?o:s.pageYOffset):t[i]=o)},t,i,arguments.length)}}),Tt.each(["top","left"],function(t,e){Tt.cssHooks[e]=M(vt.pixelPosition,function(t,n){if(n)return n=O(t,e),me.test(n)?Tt(t).position()[e]+"px":n})}),Tt.each({Height:"height",Width:"width"},function(t,e){Tt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){Tt.fn[i]=function(o,s){var r=arguments.length&&(n||"boolean"!=typeof o),a=n||(o===!0||s===!0?"margin":"border");return Xt(this,function(e,n,o){var s;return bt(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===o?Tt.css(e,n,a):Tt.style(e,n,o,a)},e,r?o:void 0,r)}})}),Tt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){Tt.fn[e]=function(t){return this.on(e,t)}}),Tt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),Tt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){Tt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}});var an=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;Tt.proxy=function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),yt(t))return i=lt.call(arguments,2),o=function(){return t.apply(e||this,i.concat(lt.call(arguments)))},o.guid=t.guid=t.guid||Tt.guid++,o},Tt.holdReady=function(t){t?Tt.readyWait++:Tt.ready(!0)},Tt.isArray=Array.isArray,Tt.parseJSON=JSON.parse,Tt.nodeName=s,Tt.isFunction=yt,Tt.isWindow=bt,Tt.camelCase=g,Tt.type=i,Tt.now=Date.now,Tt.isNumeric=function(t){var e=Tt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},Tt.trim=function(t){return null==t?"":(t+"").replace(an,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return Tt});var ln=t.jQuery,cn=t.$;return Tt.noConflict=function(e){return t.$===Tt&&(t.$=cn),e&&t.jQuery===Tt&&(t.jQuery=ln),Tt},"undefined"==typeof e&&(t.jQuery=t.$=Tt),Tt}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],e):(t="undefined"!=typeof globalThis?globalThis:t||self,e(t.bootstrap={},t.jQuery,t.Popper))}(this,function(t,e,n){"use strict";function i(t){return t&&"object"==typeof t&&"default"in t?t:{"default":t}}function o(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function r(){return r=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},r.apply(this,arguments)}function a(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,l(t,e)}function l(t,e){return(l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function c(t){return null===t||"undefined"==typeof t?""+t:{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase()}function u(){return{bindType:v,delegateType:v,handle:function(t){if(g["default"](t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}}function d(t){var e=this,n=!1;return g["default"](this).one(_.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||_.triggerTransitionEnd(e)},t),this}function h(){g["default"].fn.emulateTransitionEnd=d,g["default"].event.special[_.TRANSITION_END]=u()}function f(t,e){var n=t.nodeName.toLowerCase();if(e.indexOf(n)!==-1)return Fn.indexOf(n)===-1||Boolean(Bn.test(t.nodeValue)||Wn.test(t.nodeValue));for(var i=e.filter(function(t){return t instanceof RegExp}),o=0,s=i.length;o<s;o++)if(i[o].test(n))return!0;return!1}function p(t,e,n){if(0===t.length)return t;if(n&&"function"==typeof n)return n(t);for(var i=new window.DOMParser,o=i.parseFromString(t,"text/html"),s=Object.keys(e),r=[].slice.call(o.body.querySelectorAll("*")),a=function(t,n){var i=r[t],o=i.nodeName.toLowerCase();if(s.indexOf(i.nodeName.toLowerCase())===-1)return i.parentNode.removeChild(i),"continue";var a=[].slice.call(i.attributes),l=[].concat(e["*"]||[],e[o]||[]);a.forEach(function(t){f(t,l)||i.removeAttribute(t.nodeName)})},l=0,c=r.length;l<c;l++){a(l)}return o.body.innerHTML}var g=i(e),m=i(n),v="transitionend",y=1e6,b=1e3,_={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do t+=~~(Math.random()*y);while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(i){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=g["default"](t).css("transition-duration"),n=g["default"](t).css("transition-delay"),i=parseFloat(e),o=parseFloat(n);return i||o?(e=e.split(",")[0],n=n.split(",")[0],(parseFloat(e)+parseFloat(n))*b):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){g["default"](t).trigger(v)},supportsTransitionEnd:function(){return Boolean(v)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],s=e[i],r=s&&_.isElement(s)?"element":c(s);if(!new RegExp(o).test(r))throw new Error(t.toUpperCase()+": "+('Option "'+i+'" provided type "'+r+'" ')+('but expected type "'+o+'".'))}},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?_.findShadowRoot(t.parentNode):null},jQueryDetection:function(){if("undefined"==typeof g["default"])throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=g["default"].fn.jquery.split(" ")[0].split("."),e=1,n=2,i=9,o=1,s=4;if(t[0]<n&&t[1]<i||t[0]===e&&t[1]===i&&t[2]<o||t[0]>=s)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};_.jQueryDetection(),h();var w="alert",x="4.6.2",C="bs.alert",T="."+C,E=".data-api",S=g["default"].fn[w],$="alert",k="fade",A="show",D="close"+T,P="closed"+T,j="click"+T+E,I='[data-dismiss="alert"]',N=function(){function t(t){this._element=t}var e=t.prototype;return e.close=function(t){var e=this._element;t&&(e=this._getRootElement(t));var n=this._triggerCloseEvent(e);n.isDefaultPrevented()||this._removeElement(e)},e.dispose=function(){g["default"].removeData(this._element,C),this._element=null},e._getRootElement=function(t){var e=_.getSelectorFromElement(t),n=!1;return e&&(n=document.querySelector(e)),n||(n=g["default"](t).closest("."+$)[0]),n},e._triggerCloseEvent=function(t){var e=g["default"].Event(D);return g["default"](t).trigger(e),e},e._removeElement=function(t){var e=this;if(g["default"](t).removeClass(A),!g["default"](t).hasClass(k))return void this._destroyElement(t);var n=_.getTransitionDurationFromElement(t);g["default"](t).one(_.TRANSITION_END,function(n){return e._destroyElement(t,n)}).emulateTransitionEnd(n)},e._destroyElement=function(t){g["default"](t).detach().trigger(P).remove()},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this),i=n.data(C);i||(i=new t(this),n.data(C,i)),"close"===e&&i[e](this)})},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},s(t,null,[{key:"VERSION",get:function(){return x}}]),t}();g["default"](document).on(j,I,N._handleDismiss(new N)),g["default"].fn[w]=N._jQueryInterface,g["default"].fn[w].Constructor=N,g["default"].fn[w].noConflict=function(){return g["default"].fn[w]=S,N._jQueryInterface};var L="button",O="4.6.2",M="bs.button",H="."+M,R=".data-api",F=g["default"].fn[L],z="active",q="btn",B="focus",W="click"+H+R,X="focus"+H+R+" "+("blur"+H+R),V="load"+H+R,Q='[data-toggle^="button"]',U='[data-toggle="buttons"]',Y='[data-toggle="button"]',K='[data-toggle="buttons"] .btn',Z='input:not([type="hidden"])',G=".active",J=".btn",tt=function(){function t(t){this._element=t,this.shouldAvoidTriggerChange=!1}var e=t.prototype;return e.toggle=function(){var t=!0,e=!0,n=g["default"](this._element).closest(U)[0];if(n){var i=this._element.querySelector(Z);if(i){if("radio"===i.type)if(i.checked&&this._element.classList.contains(z))t=!1;else{var o=n.querySelector(G);o&&g["default"](o).removeClass(z)}t&&("checkbox"!==i.type&&"radio"!==i.type||(i.checked=!this._element.classList.contains(z)),this.shouldAvoidTriggerChange||g["default"](i).trigger("change")),i.focus(),e=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(z)),t&&g["default"](this._element).toggleClass(z))},e.dispose=function(){g["default"].removeData(this._element,M),this._element=null},t._jQueryInterface=function(e,n){return this.each(function(){var i=g["default"](this),o=i.data(M);o||(o=new t(this),i.data(M,o)),o.shouldAvoidTriggerChange=n,"toggle"===e&&o[e]()})},s(t,null,[{key:"VERSION",get:function(){return O}}]),t}();g["default"](document).on(W,Q,function(t){var e=t.target,n=e;if(g["default"](e).hasClass(q)||(e=g["default"](e).closest(J)[0]),!e||e.hasAttribute("disabled")||e.classList.contains("disabled"))t.preventDefault();else{var i=e.querySelector(Z);if(i&&(i.hasAttribute("disabled")||i.classList.contains("disabled")))return void t.preventDefault();"INPUT"!==n.tagName&&"LABEL"===e.tagName||tt._jQueryInterface.call(g["default"](e),"toggle","INPUT"===n.tagName)}}).on(X,Q,function(t){var e=g["default"](t.target).closest(J)[0];g["default"](e).toggleClass(B,/^focus(in)?$/.test(t.type))}),g["default"](window).on(V,function(){for(var t=[].slice.call(document.querySelectorAll(K)),e=0,n=t.length;e<n;e++){var i=t[e],o=i.querySelector(Z);o.checked||o.hasAttribute("checked")?i.classList.add(z):i.classList.remove(z)}t=[].slice.call(document.querySelectorAll(Y));for(var s=0,r=t.length;s<r;s++){var a=t[s];"true"===a.getAttribute("aria-pressed")?a.classList.add(z):a.classList.remove(z)}}),g["default"].fn[L]=tt._jQueryInterface,g["default"].fn[L].Constructor=tt,g["default"].fn[L].noConflict=function(){
return g["default"].fn[L]=F,tt._jQueryInterface};var et="carousel",nt="4.6.2",it="bs.carousel",ot="."+it,st=".data-api",rt=g["default"].fn[et],at=37,lt=39,ct=500,ut=40,dt="carousel",ht="active",ft="slide",pt="carousel-item-right",gt="carousel-item-left",mt="carousel-item-next",vt="carousel-item-prev",yt="pointer-event",bt="next",_t="prev",wt="left",xt="right",Ct="slide"+ot,Tt="slid"+ot,Et="keydown"+ot,St="mouseenter"+ot,$t="mouseleave"+ot,kt="touchstart"+ot,At="touchmove"+ot,Dt="touchend"+ot,Pt="pointerdown"+ot,jt="pointerup"+ot,It="dragstart"+ot,Nt="load"+ot+st,Lt="click"+ot+st,Ot=".active",Mt=".active.carousel-item",Ht=".carousel-item",Rt=".carousel-item img",Ft=".carousel-item-next, .carousel-item-prev",zt=".carousel-indicators",qt="[data-slide], [data-slide-to]",Bt='[data-ride="carousel"]',Wt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Xt={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Vt={TOUCH:"touch",PEN:"pen"},Qt=function(){function t(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(zt),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var e=t.prototype;return e.next=function(){this._isSliding||this._slide(bt)},e.nextWhenVisible=function(){var t=g["default"](this._element);!document.hidden&&t.is(":visible")&&"hidden"!==t.css("visibility")&&this.next()},e.prev=function(){this._isSliding||this._slide(_t)},e.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(Ft)&&(_.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},e.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},e.to=function(t){var e=this;this._activeElement=this._element.querySelector(Mt);var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0)){if(this._isSliding)return void g["default"](this._element).one(Tt,function(){return e.to(t)});if(n===t)return this.pause(),void this.cycle();var i=t>n?bt:_t;this._slide(i,this._items[t])}},e.dispose=function(){g["default"](this._element).off(ot),g["default"].removeData(this._element,it),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},e._getConfig=function(t){return t=r({},Wt,t),_.typeCheckConfig(et,t,Xt),t},e._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=ut)){var e=t/this.touchDeltaX;this.touchDeltaX=0,e>0&&this.prev(),e<0&&this.next()}},e._addEventListeners=function(){var t=this;this._config.keyboard&&g["default"](this._element).on(Et,function(e){return t._keydown(e)}),"hover"===this._config.pause&&g["default"](this._element).on(St,function(e){return t.pause(e)}).on($t,function(e){return t.cycle(e)}),this._config.touch&&this._addTouchEventListeners()},e._addTouchEventListeners=function(){var t=this;if(this._touchSupported){var e=function(e){t._pointerEvent&&Vt[e.originalEvent.pointerType.toUpperCase()]?t.touchStartX=e.originalEvent.clientX:t._pointerEvent||(t.touchStartX=e.originalEvent.touches[0].clientX)},n=function(e){t.touchDeltaX=e.originalEvent.touches&&e.originalEvent.touches.length>1?0:e.originalEvent.touches[0].clientX-t.touchStartX},i=function(e){t._pointerEvent&&Vt[e.originalEvent.pointerType.toUpperCase()]&&(t.touchDeltaX=e.originalEvent.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},ct+t._config.interval))};g["default"](this._element.querySelectorAll(Rt)).on(It,function(t){return t.preventDefault()}),this._pointerEvent?(g["default"](this._element).on(Pt,function(t){return e(t)}),g["default"](this._element).on(jt,function(t){return i(t)}),this._element.classList.add(yt)):(g["default"](this._element).on(kt,function(t){return e(t)}),g["default"](this._element).on(At,function(t){return n(t)}),g["default"](this._element).on(Dt,function(t){return i(t)}))}},e._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case at:t.preventDefault(),this.prev();break;case lt:t.preventDefault(),this.next()}},e._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(Ht)):[],this._items.indexOf(t)},e._getItemByDirection=function(t,e){var n=t===bt,i=t===_t,o=this._getItemIndex(e),s=this._items.length-1,r=i&&0===o||n&&o===s;if(r&&!this._config.wrap)return e;var a=t===_t?-1:1,l=(o+a)%this._items.length;return l===-1?this._items[this._items.length-1]:this._items[l]},e._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(this._element.querySelector(Mt)),o=g["default"].Event(Ct,{relatedTarget:t,direction:e,from:i,to:n});return g["default"](this._element).trigger(o),o},e._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll(Ot));g["default"](e).removeClass(ht);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&g["default"](n).addClass(ht)}},e._updateInterval=function(){var t=this._activeElement||this._element.querySelector(Mt);if(t){var e=parseInt(t.getAttribute("data-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}},e._slide=function(t,e){var n,i,o,s=this,r=this._element.querySelector(Mt),a=this._getItemIndex(r),l=e||r&&this._getItemByDirection(t,r),c=this._getItemIndex(l),u=Boolean(this._interval);if(t===bt?(n=gt,i=mt,o=wt):(n=pt,i=vt,o=xt),l&&g["default"](l).hasClass(ht))return void(this._isSliding=!1);var d=this._triggerSlideEvent(l,o);if(!d.isDefaultPrevented()&&r&&l){this._isSliding=!0,u&&this.pause(),this._setActiveIndicatorElement(l),this._activeElement=l;var h=g["default"].Event(Tt,{relatedTarget:l,direction:o,from:a,to:c});if(g["default"](this._element).hasClass(ft)){g["default"](l).addClass(i),_.reflow(l),g["default"](r).addClass(n),g["default"](l).addClass(n);var f=_.getTransitionDurationFromElement(r);g["default"](r).one(_.TRANSITION_END,function(){g["default"](l).removeClass(n+" "+i).addClass(ht),g["default"](r).removeClass(ht+" "+i+" "+n),s._isSliding=!1,setTimeout(function(){return g["default"](s._element).trigger(h)},0)}).emulateTransitionEnd(f)}else g["default"](r).removeClass(ht),g["default"](l).addClass(ht),this._isSliding=!1,g["default"](this._element).trigger(h);u&&this.cycle()}},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this).data(it),i=r({},Wt,g["default"](this).data());"object"==typeof e&&(i=r({},i,e));var o="string"==typeof e?e:i.slide;if(n||(n=new t(this,i),g["default"](this).data(it,n)),"number"==typeof e)n.to(e);else if("string"==typeof o){if("undefined"==typeof n[o])throw new TypeError('No method named "'+o+'"');n[o]()}else i.interval&&i.ride&&(n.pause(),n.cycle())})},t._dataApiClickHandler=function(e){var n=_.getSelectorFromElement(this);if(n){var i=g["default"](n)[0];if(i&&g["default"](i).hasClass(dt)){var o=r({},g["default"](i).data(),g["default"](this).data()),s=this.getAttribute("data-slide-to");s&&(o.interval=!1),t._jQueryInterface.call(g["default"](i),o),s&&g["default"](i).data(it).to(s),e.preventDefault()}}},s(t,null,[{key:"VERSION",get:function(){return nt}},{key:"Default",get:function(){return Wt}}]),t}();g["default"](document).on(Lt,qt,Qt._dataApiClickHandler),g["default"](window).on(Nt,function(){for(var t=[].slice.call(document.querySelectorAll(Bt)),e=0,n=t.length;e<n;e++){var i=g["default"](t[e]);Qt._jQueryInterface.call(i,i.data())}}),g["default"].fn[et]=Qt._jQueryInterface,g["default"].fn[et].Constructor=Qt,g["default"].fn[et].noConflict=function(){return g["default"].fn[et]=rt,Qt._jQueryInterface};var Ut="collapse",Yt="4.6.2",Kt="bs.collapse",Zt="."+Kt,Gt=".data-api",Jt=g["default"].fn[Ut],te="show",ee="collapse",ne="collapsing",ie="collapsed",oe="width",se="height",re="show"+Zt,ae="shown"+Zt,le="hide"+Zt,ce="hidden"+Zt,ue="click"+Zt+Gt,de=".show, .collapsing",he='[data-toggle="collapse"]',fe={toggle:!0,parent:""},pe={toggle:"boolean",parent:"(string|element)"},ge=function(){function t(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],'+('[data-toggle="collapse"][data-target="#'+t.id+'"]')));for(var n=[].slice.call(document.querySelectorAll(he)),i=0,o=n.length;i<o;i++){var s=n[i],r=_.getSelectorFromElement(s),a=[].slice.call(document.querySelectorAll(r)).filter(function(e){return e===t});null!==r&&a.length>0&&(this._selector=r,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e=t.prototype;return e.toggle=function(){g["default"](this._element).hasClass(te)?this.hide():this.show()},e.show=function(){var e=this;if(!this._isTransitioning&&!g["default"](this._element).hasClass(te)){var n,i;if(this._parent&&(n=[].slice.call(this._parent.querySelectorAll(de)).filter(function(t){return"string"==typeof e._config.parent?t.getAttribute("data-parent")===e._config.parent:t.classList.contains(ee)}),0===n.length&&(n=null)),!(n&&(i=g["default"](n).not(this._selector).data(Kt),i&&i._isTransitioning))){var o=g["default"].Event(re);if(g["default"](this._element).trigger(o),!o.isDefaultPrevented()){n&&(t._jQueryInterface.call(g["default"](n).not(this._selector),"hide"),i||g["default"](n).data(Kt,null));var s=this._getDimension();g["default"](this._element).removeClass(ee).addClass(ne),this._element.style[s]=0,this._triggerArray.length&&g["default"](this._triggerArray).removeClass(ie).attr("aria-expanded",!0),this.setTransitioning(!0);var r=function(){g["default"](e._element).removeClass(ne).addClass(ee+" "+te),e._element.style[s]="",e.setTransitioning(!1),g["default"](e._element).trigger(ae)},a=s[0].toUpperCase()+s.slice(1),l="scroll"+a,c=_.getTransitionDurationFromElement(this._element);g["default"](this._element).one(_.TRANSITION_END,r).emulateTransitionEnd(c),this._element.style[s]=this._element[l]+"px"}}}},e.hide=function(){var t=this;if(!this._isTransitioning&&g["default"](this._element).hasClass(te)){var e=g["default"].Event(le);if(g["default"](this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",_.reflow(this._element),g["default"](this._element).addClass(ne).removeClass(ee+" "+te);var i=this._triggerArray.length;if(i>0)for(var o=0;o<i;o++){var s=this._triggerArray[o],r=_.getSelectorFromElement(s);if(null!==r){var a=g["default"]([].slice.call(document.querySelectorAll(r)));a.hasClass(te)||g["default"](s).addClass(ie).attr("aria-expanded",!1)}}this.setTransitioning(!0);var l=function(){t.setTransitioning(!1),g["default"](t._element).removeClass(ne).addClass(ee).trigger(ce)};this._element.style[n]="";var c=_.getTransitionDurationFromElement(this._element);g["default"](this._element).one(_.TRANSITION_END,l).emulateTransitionEnd(c)}}},e.setTransitioning=function(t){this._isTransitioning=t},e.dispose=function(){g["default"].removeData(this._element,Kt),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},e._getConfig=function(t){return t=r({},fe,t),t.toggle=Boolean(t.toggle),_.typeCheckConfig(Ut,t,pe),t},e._getDimension=function(){var t=g["default"](this._element).hasClass(oe);return t?oe:se},e._getParent=function(){var e,n=this;_.isElement(this._config.parent)?(e=this._config.parent,"undefined"!=typeof this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(e.querySelectorAll(i));return g["default"](o).each(function(e,i){n._addAriaAndCollapsedClass(t._getTargetFromElement(i),[i])}),e},e._addAriaAndCollapsedClass=function(t,e){var n=g["default"](t).hasClass(te);e.length&&g["default"](e).toggleClass(ie,!n).attr("aria-expanded",n)},t._getTargetFromElement=function(t){var e=_.getSelectorFromElement(t);return e?document.querySelector(e):null},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this),i=n.data(Kt),o=r({},fe,n.data(),"object"==typeof e&&e?e:{});if(!i&&o.toggle&&"string"==typeof e&&/show|hide/.test(e)&&(o.toggle=!1),i||(i=new t(this,o),n.data(Kt,i)),"string"==typeof e){if("undefined"==typeof i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},s(t,null,[{key:"VERSION",get:function(){return Yt}},{key:"Default",get:function(){return fe}}]),t}();g["default"](document).on(ue,he,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var e=g["default"](this),n=_.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(n));g["default"](i).each(function(){var t=g["default"](this),n=t.data(Kt),i=n?"toggle":e.data();ge._jQueryInterface.call(t,i)})}),g["default"].fn[Ut]=ge._jQueryInterface,g["default"].fn[Ut].Constructor=ge,g["default"].fn[Ut].noConflict=function(){return g["default"].fn[Ut]=Jt,ge._jQueryInterface};var me="dropdown",ve="4.6.2",ye="bs.dropdown",be="."+ye,_e=".data-api",we=g["default"].fn[me],xe=27,Ce=32,Te=9,Ee=38,Se=40,$e=3,ke=new RegExp(Ee+"|"+Se+"|"+xe),Ae="disabled",De="show",Pe="dropup",je="dropright",Ie="dropleft",Ne="dropdown-menu-right",Le="position-static",Oe="hide"+be,Me="hidden"+be,He="show"+be,Re="shown"+be,Fe="click"+be,ze="click"+be+_e,qe="keydown"+be+_e,Be="keyup"+be+_e,We='[data-toggle="dropdown"]',Xe=".dropdown form",Ve=".dropdown-menu",Qe=".navbar-nav",Ue=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Ye="top-start",Ke="top-end",Ze="bottom-start",Ge="bottom-end",Je="right-start",tn="left-start",en={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},nn={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},on=function(){function t(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e=t.prototype;return e.toggle=function(){if(!this._element.disabled&&!g["default"](this._element).hasClass(Ae)){var e=g["default"](this._menu).hasClass(De);t._clearMenus(),e||this.show(!0)}},e.show=function(e){if(void 0===e&&(e=!1),!(this._element.disabled||g["default"](this._element).hasClass(Ae)||g["default"](this._menu).hasClass(De))){var n={relatedTarget:this._element},i=g["default"].Event(He,n),o=t._getParentFromElement(this._element);if(g["default"](o).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar&&e){if("undefined"==typeof m["default"])throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var s=this._element;"parent"===this._config.reference?s=o:_.isElement(this._config.reference)&&(s=this._config.reference,"undefined"!=typeof this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&g["default"](o).addClass(Le),this._popper=new m["default"](s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===g["default"](o).closest(Qe).length&&g["default"](document.body).children().on("mouseover",null,g["default"].noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),g["default"](this._menu).toggleClass(De),g["default"](o).toggleClass(De).trigger(g["default"].Event(Re,n))}}},e.hide=function(){if(!this._element.disabled&&!g["default"](this._element).hasClass(Ae)&&g["default"](this._menu).hasClass(De)){var e={relatedTarget:this._element},n=g["default"].Event(Oe,e),i=t._getParentFromElement(this._element);g["default"](i).trigger(n),n.isDefaultPrevented()||(this._popper&&this._popper.destroy(),g["default"](this._menu).toggleClass(De),g["default"](i).toggleClass(De).trigger(g["default"].Event(Me,e)))}},e.dispose=function(){g["default"].removeData(this._element,ye),g["default"](this._element).off(be),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},e.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},e._addEventListeners=function(){var t=this;g["default"](this._element).on(Fe,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},e._getConfig=function(t){return t=r({},this.constructor.Default,g["default"](this._element).data(),t),_.typeCheckConfig(me,t,this.constructor.DefaultType),t},e._getMenuElement=function(){if(!this._menu){var e=t._getParentFromElement(this._element);e&&(this._menu=e.querySelector(Ve))}return this._menu},e._getPlacement=function(){var t=g["default"](this._element.parentNode),e=Ze;return t.hasClass(Pe)?e=g["default"](this._menu).hasClass(Ne)?Ke:Ye:t.hasClass(je)?e=Je:t.hasClass(Ie)?e=tn:g["default"](this._menu).hasClass(Ne)&&(e=Ge),e},e._detectNavbar=function(){return g["default"](this._element).closest(".navbar").length>0},e._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=r({},e.offsets,t._config.offset(e.offsets,t._element)),e}:e.offset=this._config.offset,e},e._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),r({},t,this._config.popperConfig)},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this).data(ye),i="object"==typeof e?e:null;if(n||(n=new t(this,i),g["default"](this).data(ye,n)),"string"==typeof e){if("undefined"==typeof n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},t._clearMenus=function(e){if(!e||e.which!==$e&&("keyup"!==e.type||e.which===Te))for(var n=[].slice.call(document.querySelectorAll(We)),i=0,o=n.length;i<o;i++){var s=t._getParentFromElement(n[i]),r=g["default"](n[i]).data(ye),a={relatedTarget:n[i]};if(e&&"click"===e.type&&(a.clickEvent=e),r){var l=r._menu;if(g["default"](s).hasClass(De)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&e.which===Te)&&g["default"].contains(s,e.target))){var c=g["default"].Event(Oe,a);g["default"](s).trigger(c),c.isDefaultPrevented()||("ontouchstart"in document.documentElement&&g["default"](document.body).children().off("mouseover",null,g["default"].noop),n[i].setAttribute("aria-expanded","false"),r._popper&&r._popper.destroy(),g["default"](l).removeClass(De),g["default"](s).removeClass(De).trigger(g["default"].Event(Me,a)))}}}},t._getParentFromElement=function(t){var e,n=_.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},t._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(e.which===Ce||e.which!==xe&&(e.which!==Se&&e.which!==Ee||g["default"](e.target).closest(Ve).length)):ke.test(e.which))&&!this.disabled&&!g["default"](this).hasClass(Ae)){var n=t._getParentFromElement(this),i=g["default"](n).hasClass(De);if(i||e.which!==xe){if(e.preventDefault(),e.stopPropagation(),!i||e.which===xe||e.which===Ce)return e.which===xe&&g["default"](n.querySelector(We)).trigger("focus"),void g["default"](this).trigger("click");var o=[].slice.call(n.querySelectorAll(Ue)).filter(function(t){return g["default"](t).is(":visible")});if(0!==o.length){var s=o.indexOf(e.target);e.which===Ee&&s>0&&s--,e.which===Se&&s<o.length-1&&s++,s<0&&(s=0),o[s].focus()}}}},s(t,null,[{key:"VERSION",get:function(){return ve}},{key:"Default",get:function(){return en}},{key:"DefaultType",get:function(){return nn}}]),t}();g["default"](document).on(qe,We,on._dataApiKeydownHandler).on(qe,Ve,on._dataApiKeydownHandler).on(ze+" "+Be,on._clearMenus).on(ze,We,function(t){t.preventDefault(),t.stopPropagation(),on._jQueryInterface.call(g["default"](this),"toggle")}).on(ze,Xe,function(t){t.stopPropagation()}),g["default"].fn[me]=on._jQueryInterface,g["default"].fn[me].Constructor=on,g["default"].fn[me].noConflict=function(){return g["default"].fn[me]=we,on._jQueryInterface};var sn="modal",rn="4.6.2",an="bs.modal",ln="."+an,cn=".data-api",un=g["default"].fn[sn],dn=27,hn="modal-dialog-scrollable",fn="modal-scrollbar-measure",pn="modal-backdrop",gn="modal-open",mn="fade",vn="show",yn="modal-static",bn="hide"+ln,_n="hidePrevented"+ln,wn="hidden"+ln,xn="show"+ln,Cn="shown"+ln,Tn="focusin"+ln,En="resize"+ln,Sn="click.dismiss"+ln,$n="keydown.dismiss"+ln,kn="mouseup.dismiss"+ln,An="mousedown.dismiss"+ln,Dn="click"+ln+cn,Pn=".modal-dialog",jn=".modal-body",In='[data-toggle="modal"]',Nn='[data-dismiss="modal"]',Ln=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",On=".sticky-top",Mn={backdrop:!0,keyboard:!0,focus:!0,show:!0},Hn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Rn=function(){function t(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(Pn),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var e=t.prototype;return e.toggle=function(t){return this._isShown?this.hide():this.show(t)},e.show=function(t){var e=this;if(!this._isShown&&!this._isTransitioning){var n=g["default"].Event(xn,{relatedTarget:t});g["default"](this._element).trigger(n),n.isDefaultPrevented()||(this._isShown=!0,g["default"](this._element).hasClass(mn)&&(this._isTransitioning=!0),this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),g["default"](this._element).on(Sn,Nn,function(t){return e.hide(t)}),g["default"](this._dialog).on(An,function(){g["default"](e._element).one(kn,function(t){g["default"](t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},e.hide=function(t){var e=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var n=g["default"].Event(bn);if(g["default"](this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=g["default"](this._element).hasClass(mn);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),g["default"](document).off(Tn),g["default"](this._element).removeClass(vn),g["default"](this._element).off(Sn),g["default"](this._dialog).off(An),i){var o=_.getTransitionDurationFromElement(this._element);g["default"](this._element).one(_.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(o)}else this._hideModal()}}},e.dispose=function(){[window,this._element,this._dialog].forEach(function(t){return g["default"](t).off(ln)}),g["default"](document).off(Tn),g["default"].removeData(this._element,an),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},e.handleUpdate=function(){this._adjustDialog()},e._getConfig=function(t){return t=r({},Mn,t),_.typeCheckConfig(sn,t,Hn),t},e._triggerBackdropTransition=function(){var t=this,e=g["default"].Event(_n);if(g["default"](this._element).trigger(e),!e.isDefaultPrevented()){var n=this._element.scrollHeight>document.documentElement.clientHeight;n||(this._element.style.overflowY="hidden"),this._element.classList.add(yn);var i=_.getTransitionDurationFromElement(this._dialog);g["default"](this._element).off(_.TRANSITION_END),g["default"](this._element).one(_.TRANSITION_END,function(){t._element.classList.remove(yn),n||g["default"](t._element).one(_.TRANSITION_END,function(){t._element.style.overflowY=""}).emulateTransitionEnd(t._element,i)}).emulateTransitionEnd(i),this._element.focus()}},e._showElement=function(t){var e=this,n=g["default"](this._element).hasClass(mn),i=this._dialog?this._dialog.querySelector(jn):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),g["default"](this._dialog).hasClass(hn)&&i?i.scrollTop=0:this._element.scrollTop=0,n&&_.reflow(this._element),g["default"](this._element).addClass(vn),this._config.focus&&this._enforceFocus();var o=g["default"].Event(Cn,{relatedTarget:t}),s=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,g["default"](e._element).trigger(o)};if(n){var r=_.getTransitionDurationFromElement(this._dialog);g["default"](this._dialog).one(_.TRANSITION_END,s).emulateTransitionEnd(r)}else s()},e._enforceFocus=function(){var t=this;g["default"](document).off(Tn).on(Tn,function(e){document!==e.target&&t._element!==e.target&&0===g["default"](t._element).has(e.target).length&&t._element.focus()})},e._setEscapeEvent=function(){var t=this;this._isShown?g["default"](this._element).on($n,function(e){t._config.keyboard&&e.which===dn?(e.preventDefault(),t.hide()):t._config.keyboard||e.which!==dn||t._triggerBackdropTransition()}):this._isShown||g["default"](this._element).off($n)},e._setResizeEvent=function(){var t=this;this._isShown?g["default"](window).on(En,function(e){return t.handleUpdate(e)}):g["default"](window).off(En)},e._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._showBackdrop(function(){g["default"](document.body).removeClass(gn),t._resetAdjustments(),t._resetScrollbar(),g["default"](t._element).trigger(wn)})},e._removeBackdrop=function(){this._backdrop&&(g["default"](this._backdrop).remove(),this._backdrop=null)},e._showBackdrop=function(t){var e=this,n=g["default"](this._element).hasClass(mn)?mn:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=pn,n&&this._backdrop.classList.add(n),g["default"](this._backdrop).appendTo(document.body),g["default"](this._element).on(Sn,function(t){return e._ignoreBackdropClick?void(e._ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"===e._config.backdrop?e._triggerBackdropTransition():e.hide()))}),n&&_.reflow(this._backdrop),g["default"](this._backdrop).addClass(vn),!t)return;if(!n)return void t();var i=_.getTransitionDurationFromElement(this._backdrop);g["default"](this._backdrop).one(_.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){g["default"](this._backdrop).removeClass(vn);var o=function(){e._removeBackdrop(),t&&t()};if(g["default"](this._element).hasClass(mn)){var s=_.getTransitionDurationFromElement(this._backdrop);g["default"](this._backdrop).one(_.TRANSITION_END,o).emulateTransitionEnd(s)}else o()}else t&&t()},e._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},e._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},e._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=Math.round(t.left+t.right)<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},e._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var e=[].slice.call(document.querySelectorAll(Ln)),n=[].slice.call(document.querySelectorAll(On));g["default"](e).each(function(e,n){var i=n.style.paddingRight,o=g["default"](n).css("padding-right");g["default"](n).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),g["default"](n).each(function(e,n){var i=n.style.marginRight,o=g["default"](n).css("margin-right");g["default"](n).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")});var i=document.body.style.paddingRight,o=g["default"](document.body).css("padding-right");g["default"](document.body).data("padding-right",i).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}g["default"](document.body).addClass(gn)},e._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(Ln));g["default"](t).each(function(t,e){var n=g["default"](e).data("padding-right");g["default"](e).removeData("padding-right"),e.style.paddingRight=n?n:""});var e=[].slice.call(document.querySelectorAll(""+On));g["default"](e).each(function(t,e){var n=g["default"](e).data("margin-right");"undefined"!=typeof n&&g["default"](e).css("margin-right",n).removeData("margin-right")});var n=g["default"](document.body).data("padding-right");g["default"](document.body).removeData("padding-right"),document.body.style.paddingRight=n?n:""},e._getScrollbarWidth=function(){var t=document.createElement("div");t.className=fn,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},t._jQueryInterface=function(e,n){return this.each(function(){var i=g["default"](this).data(an),o=r({},Mn,g["default"](this).data(),"object"==typeof e&&e?e:{});if(i||(i=new t(this,o),g["default"](this).data(an,i)),"string"==typeof e){if("undefined"==typeof i[e])throw new TypeError('No method named "'+e+'"');i[e](n)}else o.show&&i.show(n)})},s(t,null,[{key:"VERSION",get:function(){return rn}},{key:"Default",get:function(){return Mn}}]),t}();g["default"](document).on(Dn,In,function(t){var e,n=this,i=_.getSelectorFromElement(this);i&&(e=document.querySelector(i));var o=g["default"](e).data(an)?"toggle":r({},g["default"](e).data(),g["default"](this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=g["default"](e).one(xn,function(t){t.isDefaultPrevented()||s.one(wn,function(){g["default"](n).is(":visible")&&n.focus()})});Rn._jQueryInterface.call(g["default"](e),o,this)}),g["default"].fn[sn]=Rn._jQueryInterface,g["default"].fn[sn].Constructor=Rn,g["default"].fn[sn].noConflict=function(){return g["default"].fn[sn]=un,Rn._jQueryInterface};var Fn=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],zn=/^aria-[\w-]*$/i,qn={"*":["class","dir","id","lang","role",zn],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Bn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Wn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Xn="tooltip",Vn="4.6.2",Qn="bs.tooltip",Un="."+Qn,Yn=g["default"].fn[Xn],Kn="bs-tooltip",Zn=new RegExp("(^|\\s)"+Kn+"\\S+","g"),Gn=["sanitize","whiteList","sanitizeFn"],Jn="fade",ti="show",ei="show",ni="out",ii=".tooltip-inner",oi=".arrow",si="hover",ri="focus",ai="click",li="manual",ci={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},ui={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",
title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",customClass:"",sanitize:!0,sanitizeFn:null,whiteList:qn,popperConfig:null},di={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},hi={HIDE:"hide"+Un,HIDDEN:"hidden"+Un,SHOW:"show"+Un,SHOWN:"shown"+Un,INSERTED:"inserted"+Un,CLICK:"click"+Un,FOCUSIN:"focusin"+Un,FOCUSOUT:"focusout"+Un,MOUSEENTER:"mouseenter"+Un,MOUSELEAVE:"mouseleave"+Un},fi=function(){function t(t,e){if("undefined"==typeof m["default"])throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var e=t.prototype;return e.enable=function(){this._isEnabled=!0},e.disable=function(){this._isEnabled=!1},e.toggleEnabled=function(){this._isEnabled=!this._isEnabled},e.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=g["default"](t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),g["default"](t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(g["default"](this.getTipElement()).hasClass(ti))return void this._leave(null,this);this._enter(null,this)}},e.dispose=function(){clearTimeout(this._timeout),g["default"].removeData(this.element,this.constructor.DATA_KEY),g["default"](this.element).off(this.constructor.EVENT_KEY),g["default"](this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&g["default"](this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},e.show=function(){var t=this;if("none"===g["default"](this.element).css("display"))throw new Error("Please use show on visible elements");var e=g["default"].Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){g["default"](this.element).trigger(e);var n=_.findShadowRoot(this.element),i=g["default"].contains(null!==n?n:this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!i)return;var o=this.getTipElement(),s=_.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&g["default"](o).addClass(Jn);var r="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,a=this._getAttachment(r);this.addAttachmentClass(a);var l=this._getContainer();g["default"](o).data(this.constructor.DATA_KEY,this),g["default"].contains(this.element.ownerDocument.documentElement,this.tip)||g["default"](o).appendTo(l),g["default"](this.element).trigger(this.constructor.Event.INSERTED),this._popper=new m["default"](this.element,o,this._getPopperConfig(a)),g["default"](o).addClass(ti),g["default"](o).addClass(this.config.customClass),"ontouchstart"in document.documentElement&&g["default"](document.body).children().on("mouseover",null,g["default"].noop);var c=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,g["default"](t.element).trigger(t.constructor.Event.SHOWN),e===ni&&t._leave(null,t)};if(g["default"](this.tip).hasClass(Jn)){var u=_.getTransitionDurationFromElement(this.tip);g["default"](this.tip).one(_.TRANSITION_END,c).emulateTransitionEnd(u)}else c()}},e.hide=function(t){var e=this,n=this.getTipElement(),i=g["default"].Event(this.constructor.Event.HIDE),o=function(){e._hoverState!==ei&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),g["default"](e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(g["default"](this.element).trigger(i),!i.isDefaultPrevented()){if(g["default"](n).removeClass(ti),"ontouchstart"in document.documentElement&&g["default"](document.body).children().off("mouseover",null,g["default"].noop),this._activeTrigger[ai]=!1,this._activeTrigger[ri]=!1,this._activeTrigger[si]=!1,g["default"](this.tip).hasClass(Jn)){var s=_.getTransitionDurationFromElement(n);g["default"](n).one(_.TRANSITION_END,o).emulateTransitionEnd(s)}else o();this._hoverState=""}},e.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},e.isWithContent=function(){return Boolean(this.getTitle())},e.addAttachmentClass=function(t){g["default"](this.getTipElement()).addClass(Kn+"-"+t)},e.getTipElement=function(){return this.tip=this.tip||g["default"](this.config.template)[0],this.tip},e.setContent=function(){var t=this.getTipElement();this.setElementContent(g["default"](t.querySelectorAll(ii)),this.getTitle()),g["default"](t).removeClass(Jn+" "+ti)},e.setElementContent=function(t,e){return"object"==typeof e&&(e.nodeType||e.jquery)?void(this.config.html?g["default"](e).parent().is(t)||t.empty().append(e):t.text(g["default"](e).text())):void(this.config.html?(this.config.sanitize&&(e=p(e,this.config.whiteList,this.config.sanitizeFn)),t.html(e)):t.text(e))},e.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},e._getPopperConfig=function(t){var e=this,n={placement:t,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:oi},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){return e._handlePopperPlacementChange(t)}};return r({},n,this.config.popperConfig)},e._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=r({},e.offsets,t.config.offset(e.offsets,t.element)),e}:e.offset=this.config.offset,e},e._getContainer=function(){return this.config.container===!1?document.body:_.isElement(this.config.container)?g["default"](this.config.container):g["default"](document).find(this.config.container)},e._getAttachment=function(t){return ci[t.toUpperCase()]},e._setListeners=function(){var t=this,e=this.config.trigger.split(" ");e.forEach(function(e){if("click"===e)g["default"](t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(e!==li){var n=e===si?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=e===si?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;g["default"](t.element).on(n,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}}),this._hideModalHandler=function(){t.element&&t.hide()},g["default"](this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=r({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},e._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},e._enter=function(t,e){var n=this.constructor.DATA_KEY;return e=e||g["default"](t.currentTarget).data(n),e||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),g["default"](t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?ri:si]=!0),g["default"](e.getTipElement()).hasClass(ti)||e._hoverState===ei?void(e._hoverState=ei):(clearTimeout(e._timeout),e._hoverState=ei,e.config.delay&&e.config.delay.show?void(e._timeout=setTimeout(function(){e._hoverState===ei&&e.show()},e.config.delay.show)):void e.show())},e._leave=function(t,e){var n=this.constructor.DATA_KEY;if(e=e||g["default"](t.currentTarget).data(n),e||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),g["default"](t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?ri:si]=!1),!e._isWithActiveTrigger())return clearTimeout(e._timeout),e._hoverState=ni,e.config.delay&&e.config.delay.hide?void(e._timeout=setTimeout(function(){e._hoverState===ni&&e.hide()},e.config.delay.hide)):void e.hide()},e._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},e._getConfig=function(t){var e=g["default"](this.element).data();return Object.keys(e).forEach(function(t){Gn.indexOf(t)!==-1&&delete e[t]}),t=r({},this.constructor.Default,e,"object"==typeof t&&t?t:{}),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),_.typeCheckConfig(Xn,t,this.constructor.DefaultType),t.sanitize&&(t.template=p(t.template,t.whiteList,t.sanitizeFn)),t},e._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},e._cleanTipClass=function(){var t=g["default"](this.getTipElement()),e=t.attr("class").match(Zn);null!==e&&e.length&&t.removeClass(e.join(""))},e._handlePopperPlacementChange=function(t){this.tip=t.instance.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},e._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(g["default"](t).removeClass(Jn),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this),i=n.data(Qn),o="object"==typeof e&&e;if((i||!/dispose|hide/.test(e))&&(i||(i=new t(this,o),n.data(Qn,i)),"string"==typeof e)){if("undefined"==typeof i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},s(t,null,[{key:"VERSION",get:function(){return Vn}},{key:"Default",get:function(){return ui}},{key:"NAME",get:function(){return Xn}},{key:"DATA_KEY",get:function(){return Qn}},{key:"Event",get:function(){return hi}},{key:"EVENT_KEY",get:function(){return Un}},{key:"DefaultType",get:function(){return di}}]),t}();g["default"].fn[Xn]=fi._jQueryInterface,g["default"].fn[Xn].Constructor=fi,g["default"].fn[Xn].noConflict=function(){return g["default"].fn[Xn]=Yn,fi._jQueryInterface};var pi="popover",gi="4.6.2",mi="bs.popover",vi="."+mi,yi=g["default"].fn[pi],bi="bs-popover",_i=new RegExp("(^|\\s)"+bi+"\\S+","g"),wi="fade",xi="show",Ci=".popover-header",Ti=".popover-body",Ei=r({},fi.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Si=r({},fi.DefaultType,{content:"(string|element|function)"}),$i={HIDE:"hide"+vi,HIDDEN:"hidden"+vi,SHOW:"show"+vi,SHOWN:"shown"+vi,INSERTED:"inserted"+vi,CLICK:"click"+vi,FOCUSIN:"focusin"+vi,FOCUSOUT:"focusout"+vi,MOUSEENTER:"mouseenter"+vi,MOUSELEAVE:"mouseleave"+vi},ki=function(t){function e(){return t.apply(this,arguments)||this}a(e,t);var n=e.prototype;return n.isWithContent=function(){return this.getTitle()||this._getContent()},n.addAttachmentClass=function(t){g["default"](this.getTipElement()).addClass(bi+"-"+t)},n.getTipElement=function(){return this.tip=this.tip||g["default"](this.config.template)[0],this.tip},n.setContent=function(){var t=g["default"](this.getTipElement());this.setElementContent(t.find(Ci),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(Ti),e),t.removeClass(wi+" "+xi)},n._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},n._cleanTipClass=function(){var t=g["default"](this.getTipElement()),e=t.attr("class").match(_i);null!==e&&e.length>0&&t.removeClass(e.join(""))},e._jQueryInterface=function(t){return this.each(function(){var n=g["default"](this).data(mi),i="object"==typeof t?t:null;if((n||!/dispose|hide/.test(t))&&(n||(n=new e(this,i),g["default"](this).data(mi,n)),"string"==typeof t)){if("undefined"==typeof n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},s(e,null,[{key:"VERSION",get:function(){return gi}},{key:"Default",get:function(){return Ei}},{key:"NAME",get:function(){return pi}},{key:"DATA_KEY",get:function(){return mi}},{key:"Event",get:function(){return $i}},{key:"EVENT_KEY",get:function(){return vi}},{key:"DefaultType",get:function(){return Si}}]),e}(fi);g["default"].fn[pi]=ki._jQueryInterface,g["default"].fn[pi].Constructor=ki,g["default"].fn[pi].noConflict=function(){return g["default"].fn[pi]=yi,ki._jQueryInterface};var Ai="scrollspy",Di="4.6.2",Pi="bs.scrollspy",ji="."+Pi,Ii=".data-api",Ni=g["default"].fn[Ai],Li="dropdown-item",Oi="active",Mi="activate"+ji,Hi="scroll"+ji,Ri="load"+ji+Ii,Fi="offset",zi="position",qi='[data-spy="scroll"]',Bi=".nav, .list-group",Wi=".nav-link",Xi=".nav-item",Vi=".list-group-item",Qi=".dropdown",Ui=".dropdown-item",Yi=".dropdown-toggle",Ki={offset:10,method:"auto",target:""},Zi={offset:"number",method:"string",target:"(string|element)"},Gi=function(){function t(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+Wi+","+(this._config.target+" "+Vi+",")+(this._config.target+" "+Ui),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,g["default"](this._scrollElement).on(Hi,function(t){return n._process(t)}),this.refresh(),this._process()}var e=t.prototype;return e.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?Fi:zi,n="auto"===this._config.method?e:this._config.method,i=n===zi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var o=[].slice.call(document.querySelectorAll(this._selector));o.map(function(t){var e,o=_.getSelectorFromElement(t);if(o&&(e=document.querySelector(o)),e){var s=e.getBoundingClientRect();if(s.width||s.height)return[g["default"](e)[n]().top+i,o]}return null}).filter(Boolean).sort(function(t,e){return t[0]-e[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},e.dispose=function(){g["default"].removeData(this._element,Pi),g["default"](this._scrollElement).off(ji),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},e._getConfig=function(t){if(t=r({},Ki,"object"==typeof t&&t?t:{}),"string"!=typeof t.target&&_.isElement(t.target)){var e=g["default"](t.target).attr("id");e||(e=_.getUID(Ai),g["default"](t.target).attr("id",e)),t.target="#"+e}return _.typeCheckConfig(Ai,t,Zi),t},e._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},e._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},e._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},e._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];return void(this._activeTarget!==i&&this._activate(i))}if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){var s=this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&("undefined"==typeof this._offsets[o+1]||t<this._offsets[o+1]);s&&this._activate(this._targets[o])}},e._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",").map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'}),n=g["default"]([].slice.call(document.querySelectorAll(e.join(","))));n.hasClass(Li)?(n.closest(Qi).find(Yi).addClass(Oi),n.addClass(Oi)):(n.addClass(Oi),n.parents(Bi).prev(Wi+", "+Vi).addClass(Oi),n.parents(Bi).prev(Xi).children(Wi).addClass(Oi)),g["default"](this._scrollElement).trigger(Mi,{relatedTarget:t})},e._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter(function(t){return t.classList.contains(Oi)}).forEach(function(t){return t.classList.remove(Oi)})},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this).data(Pi),i="object"==typeof e&&e;if(n||(n=new t(this,i),g["default"](this).data(Pi,n)),"string"==typeof e){if("undefined"==typeof n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},s(t,null,[{key:"VERSION",get:function(){return Di}},{key:"Default",get:function(){return Ki}}]),t}();g["default"](window).on(Ri,function(){for(var t=[].slice.call(document.querySelectorAll(qi)),e=t.length,n=e;n--;){var i=g["default"](t[n]);Gi._jQueryInterface.call(i,i.data())}}),g["default"].fn[Ai]=Gi._jQueryInterface,g["default"].fn[Ai].Constructor=Gi,g["default"].fn[Ai].noConflict=function(){return g["default"].fn[Ai]=Ni,Gi._jQueryInterface};var Ji="tab",to="4.6.2",eo="bs.tab",no="."+eo,io=".data-api",oo=g["default"].fn[Ji],so="dropdown-menu",ro="active",ao="disabled",lo="fade",co="show",uo="hide"+no,ho="hidden"+no,fo="show"+no,po="shown"+no,go="click"+no+io,mo=".dropdown",vo=".nav, .list-group",yo=".active",bo="> li > .active",_o='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',wo=".dropdown-toggle",xo="> .dropdown-menu .active",Co=function(){function t(t){this._element=t}var e=t.prototype;return e.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&g["default"](this._element).hasClass(ro)||g["default"](this._element).hasClass(ao)||this._element.hasAttribute("disabled"))){var e,n,i=g["default"](this._element).closest(vo)[0],o=_.getSelectorFromElement(this._element);if(i){var s="UL"===i.nodeName||"OL"===i.nodeName?bo:yo;n=g["default"].makeArray(g["default"](i).find(s)),n=n[n.length-1]}var r=g["default"].Event(uo,{relatedTarget:this._element}),a=g["default"].Event(fo,{relatedTarget:n});if(n&&g["default"](n).trigger(r),g["default"](this._element).trigger(a),!a.isDefaultPrevented()&&!r.isDefaultPrevented()){o&&(e=document.querySelector(o)),this._activate(this._element,i);var l=function(){var e=g["default"].Event(ho,{relatedTarget:t._element}),i=g["default"].Event(po,{relatedTarget:n});g["default"](n).trigger(e),g["default"](t._element).trigger(i)};e?this._activate(e,e.parentNode,l):l()}}},e.dispose=function(){g["default"].removeData(this._element,eo),this._element=null},e._activate=function(t,e,n){var i=this,o=!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?g["default"](e).children(yo):g["default"](e).find(bo),s=o[0],r=n&&s&&g["default"](s).hasClass(lo),a=function(){return i._transitionComplete(t,s,n)};if(s&&r){var l=_.getTransitionDurationFromElement(s);g["default"](s).removeClass(co).one(_.TRANSITION_END,a).emulateTransitionEnd(l)}else a()},e._transitionComplete=function(t,e,n){if(e){g["default"](e).removeClass(ro);var i=g["default"](e.parentNode).find(xo)[0];i&&g["default"](i).removeClass(ro),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}g["default"](t).addClass(ro),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),_.reflow(t),t.classList.contains(lo)&&t.classList.add(co);var o=t.parentNode;if(o&&"LI"===o.nodeName&&(o=o.parentNode),o&&g["default"](o).hasClass(so)){var s=g["default"](t).closest(mo)[0];if(s){var r=[].slice.call(s.querySelectorAll(wo));g["default"](r).addClass(ro)}t.setAttribute("aria-expanded",!0)}n&&n()},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this),i=n.data(eo);if(i||(i=new t(this),n.data(eo,i)),"string"==typeof e){if("undefined"==typeof i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},s(t,null,[{key:"VERSION",get:function(){return to}}]),t}();g["default"](document).on(go,_o,function(t){t.preventDefault(),Co._jQueryInterface.call(g["default"](this),"show")}),g["default"].fn[Ji]=Co._jQueryInterface,g["default"].fn[Ji].Constructor=Co,g["default"].fn[Ji].noConflict=function(){return g["default"].fn[Ji]=oo,Co._jQueryInterface};var To="toast",Eo="4.6.2",So="bs.toast",$o="."+So,ko=g["default"].fn[To],Ao="fade",Do="hide",Po="show",jo="showing",Io="click.dismiss"+$o,No="hide"+$o,Lo="hidden"+$o,Oo="show"+$o,Mo="shown"+$o,Ho='[data-dismiss="toast"]',Ro={animation:!0,autohide:!0,delay:500},Fo={animation:"boolean",autohide:"boolean",delay:"number"},zo=function(){function t(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}var e=t.prototype;return e.show=function(){var t=this,e=g["default"].Event(Oo);if(g["default"](this._element).trigger(e),!e.isDefaultPrevented()){this._clearTimeout(),this._config.animation&&this._element.classList.add(Ao);var n=function(){t._element.classList.remove(jo),t._element.classList.add(Po),g["default"](t._element).trigger(Mo),t._config.autohide&&(t._timeout=setTimeout(function(){t.hide()},t._config.delay))};if(this._element.classList.remove(Do),_.reflow(this._element),this._element.classList.add(jo),this._config.animation){var i=_.getTransitionDurationFromElement(this._element);g["default"](this._element).one(_.TRANSITION_END,n).emulateTransitionEnd(i)}else n()}},e.hide=function(){if(this._element.classList.contains(Po)){var t=g["default"].Event(No);g["default"](this._element).trigger(t),t.isDefaultPrevented()||this._close()}},e.dispose=function(){this._clearTimeout(),this._element.classList.contains(Po)&&this._element.classList.remove(Po),g["default"](this._element).off(Io),g["default"].removeData(this._element,So),this._element=null,this._config=null},e._getConfig=function(t){return t=r({},Ro,g["default"](this._element).data(),"object"==typeof t&&t?t:{}),_.typeCheckConfig(To,t,this.constructor.DefaultType),t},e._setListeners=function(){var t=this;g["default"](this._element).on(Io,Ho,function(){return t.hide()})},e._close=function(){var t=this,e=function(){t._element.classList.add(Do),g["default"](t._element).trigger(Lo)};if(this._element.classList.remove(Po),this._config.animation){var n=_.getTransitionDurationFromElement(this._element);g["default"](this._element).one(_.TRANSITION_END,e).emulateTransitionEnd(n)}else e()},e._clearTimeout=function(){clearTimeout(this._timeout),this._timeout=null},t._jQueryInterface=function(e){return this.each(function(){var n=g["default"](this),i=n.data(So),o="object"==typeof e&&e;if(i||(i=new t(this,o),n.data(So,i)),"string"==typeof e){if("undefined"==typeof i[e])throw new TypeError('No method named "'+e+'"');i[e](this)}})},s(t,null,[{key:"VERSION",get:function(){return Eo}},{key:"DefaultType",get:function(){return Fo}},{key:"Default",get:function(){return Ro}}]),t}();g["default"].fn[To]=zo._jQueryInterface,g["default"].fn[To].Constructor=zo,g["default"].fn[To].noConflict=function(){return g["default"].fn[To]=ko,zo._jQueryInterface},t.Alert=N,t.Button=tt,t.Carousel=Qt,t.Collapse=ge,t.Dropdown=on,t.Modal=Rn,t.Popover=ki,t.Scrollspy=Gi,t.Tab=Co,t.Toast=zo,t.Tooltip=fi,t.Util=_,Object.defineProperty(t,"__esModule",{value:!0})}),function(t,e,n,i){function o(e,n){this.settings=null,this.options=t.extend({},o.Defaults,n),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,n){this._handlers[n]=t.proxy(this[n],this)},this)),t.each(o.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(o.Workers,t.proxy(function(e,n){this._pipe.push({filter:n.filter,run:t.proxy(n.run,this)})},this)),this.setup(),this.initialize()}o.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},o.Width={Default:"default",Inner:"inner",Outer:"outer"},o.Type={Event:"event",State:"state"},o.Plugins={},o.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,o={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(o),t.css=o}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,o=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=n>1||t.items.merge,s[i]=o?e*n:this._items[i].width();this._widths=s}},{filter:["items","settings"],run:function(){var e=[],n=this._items,i=this.settings,o=Math.max(2*i.items,4),s=2*Math.ceil(n.length/2),r=i.loop&&n.length?i.rewind?o:Math.max(o,s):0,a="",l="";for(r/=2;r>0;)e.push(this.normalize(e.length/2,!0)),a+=n[e[e.length-1]][0].outerHTML,e.push(this.normalize(n.length-1-(e.length-1)/2,!0)),l=n[e[e.length-1]][0].outerHTML+l,r-=1;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,o=0,s=[];++n<e;)i=s[n-1]||0,o=this._widths[this.relative(n)]+this.settings.margin,s.push(i+o*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,o=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,r=this.coordinates(this.current())+s,a=r+this.width()*o,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+s*o,(this.op(t,"<=",r)&&this.op(t,">",a)||this.op(e,"<",r)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],o.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+">",{"class":this.settings.stageClass}).wrap(t("<div/>",{"class":this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},o.prototype.initializeItems=function(){var e=this.$element.find(".owl-item");return e.length?(this._items=e.get().map(function(e){return t(e)}),this._mergers=this._items.map(function(){return 1}),void this.refresh()):(this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),void this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass))},o.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var t,e,n;t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,n=this.$element.children(e).width(),t.length&&n<=0&&this.preloadAutoWidthImages(t)}this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},o.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},o.prototype.setup=function(){var e=this.viewport(),n=this.options.responsive,i=-1,o=null;n?(t.each(n,function(t){t<=e&&t>i&&(i=Number(t))}),o=t.extend({},this.options,n[i]),"function"==typeof o.stagePadding&&(o.stagePadding=o.stagePadding()),delete o.responsive,o.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):o=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:o}}),this._breakpoint=i,this.settings=o,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},o.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},o.prototype.prepare=function(e){var n=this.trigger("prepare",{content:e});return n.data||(n.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:n.data}),n.data},o.prototype.update=function(){for(var e=0,n=this._pipe.length,i=t.proxy(function(t){return this[t]},this._invalidated),o={};e<n;)(this._invalidated.all||t.grep(this._pipe[e].filter,i).length>0)&&this._pipe[e].run(o),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},o.prototype.width=function(t){switch(t=t||o.Width.Default){case o.Width.Inner:case o.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},o.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},o.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},o.prototype.onResize=function(){return!!this._items.length&&(this._width!==this.$element.width()&&(!!this.isVisible()&&(this.enter("resizing"),
this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))))},o.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),this.settings.responsive!==!1&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},o.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),i={x:i[16===i.length?12:4],y:i[16===i.length?13:5]}):(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},o.prototype.onDragMove=function(t){var e=null,n=null,i=null,o=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,o);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*o.x/5:0,s.x=Math.max(Math.min(s.x,e+i),n+i)),this._drag.stage.current=s,this.animate(s.x))},o.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),o=this._drag.stage.current,s=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(o.x,0!==i.x?s:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=s,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},o.prototype.closest=function(e,n){var o=-1,s=30,r=this.width(),a=this.coordinates();return this.settings.freeDrag||t.each(a,t.proxy(function(t,l){return"left"===n&&e>l-s&&e<l+s?o=t:"right"===n&&e>l-r-s&&e<l-r+s?o=t+1:this.op(e,"<",l)&&this.op(e,">",a[t+1]!==i?a[t+1]:l-r)&&(o="left"===n?t+1:t),o===-1},this)),this.settings.loop||(this.op(e,">",a[this.minimum()])?o=e=this.minimum():this.op(e,"<",a[this.maximum()])&&(o=e=this.maximum())),o},o.prototype.animate=function(e){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):n?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},o.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},o.prototype.current=function(t){if(t===i)return this._current;if(0===this._items.length)return i;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==i&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},o.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},o.prototype.reset=function(t){t=this.normalize(t),t!==i&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},o.prototype.normalize=function(t,e){var n=this._items.length,o=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=i:(t<0||t>=n+o)&&(t=((t-o/2)%n+n)%n+o/2),t},o.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},o.prototype.maximum=function(t){var e,n,i,o=this.settings,s=this._coordinates.length;if(o.loop)s=this._clones.length/2+this._items.length-1;else if(o.autoWidth||o.merge){if(e=this._items.length)for(n=this._items[--e].width(),i=this.$element.width();e--&&(n+=this._items[e].width()+this.settings.margin,!(n>i)););s=e+1}else s=o.center?this._items.length-1:this._items.length-o.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},o.prototype.minimum=function(t){return t?0:this._clones.length/2},o.prototype.items=function(t){return t===i?this._items.slice():(t=this.normalize(t,!0),this._items[t])},o.prototype.mergers=function(t){return t===i?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},o.prototype.clones=function(e){var n=this._clones.length/2,o=n+this._items.length,s=function(t){return t%2===0?o+t/2:n-(t+1)/2};return e===i?t.map(this._clones,function(t,e){return s(e)}):t.map(this._clones,function(t,n){return t===e?s(n):null})},o.prototype.speed=function(t){return t!==i&&(this._speed=t),this._speed},o.prototype.coordinates=function(e){var n,o=1,s=e-1;return e===i?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(o=-1,s=e+1),n=this._coordinates[e],n+=(this.width()-n+(this._coordinates[s]||0))/2*o):n=this._coordinates[s]||0,n=Math.ceil(n))},o.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},o.prototype.to=function(t,e){var n=this.current(),i=null,o=t-this.relative(n),s=(o>0)-(o<0),r=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(o)>r/2&&(o+=s*-1*r),t=n+o,i=((t-a)%r+r)%r+a,i!==t&&i-o<=l&&i-o>0&&(n=i-o,t=i,this.reset(n))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.isVisible()&&this.update()},o.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},o.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},o.prototype.onTransitionEnd=function(t){return(t===i||(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},o.prototype.viewport=function(){var i;return this.options.responsiveBaseElement!==e?i=t(this.options.responsiveBaseElement).width():e.innerWidth?i=e.innerWidth:n.documentElement&&n.documentElement.clientWidth?i=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),i},o.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},o.prototype.add=function(e,n){var o=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:n}),e=this.prepare(e),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[n-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(e),this._items.splice(n,0,e),this._mergers.splice(n,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[o]&&this.reset(this._items[o].index()),this.invalidate("items"),this.trigger("added",{content:e,position:n})},o.prototype.remove=function(t){t=this.normalize(t,!0),t!==i&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},o.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,n){this.enter("pre-loading"),n=t(n),t(new Image).one("load",t.proxy(function(t){n.attr("src",t.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},o.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),this.settings.responsive!==!1&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},o.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?t>n:t<n;case">":return i?t<n:t>n;case">=":return i?t<=n:t>=n;case"<=":return i?t>=n:t<=n}},o.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},o.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},o.prototype.trigger=function(e,n,i,s,r){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,i],function(t){return t}).join("-").toLowerCase()),c=t.Event([e,"owl",i||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,n));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(c)}),this.register({type:o.Type.Event,name:e}),this.$element.trigger(c),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,c)),c},o.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===i&&(this._states.current[e]=0),this._states.current[e]++},this))},o.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},o.prototype.register=function(e){if(e.type===o.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var n=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!n||!n.apply||t.namespace&&t.namespace.indexOf("owl")!==-1?t.namespace&&t.namespace.indexOf("owl")>-1:n.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===o.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(n,i){return t.inArray(n,this._states.tags[e.name])===i},this)))},o.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},o.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},o.prototype.pointer=function(t){var n={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(n.x=t.pageX,n.y=t.pageY):(n.x=t.clientX,n.y=t.clientY),n},o.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},o.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=t(this),s=i.data("owl.carousel");s||(s=new o(this,"object"==typeof e&&e),i.data("owl.carousel",s),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,n){s.register({type:o.Type.Event,name:n}),s.$element.on(n+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([n]),s[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},s))})),"string"==typeof e&&"_"!==e.charAt(0)&&s[e].apply(s,n)})},t.fn.owlCarousel.Constructor=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers)};o.Defaults={autoRefresh:!0,autoRefreshInterval:500},o.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},o.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},o.prototype.destroy=function(){var t,n;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type)){var n=this._core.settings,o=n.center&&Math.ceil(n.items/2)||n.items,s=n.center&&o*-1||0,r=(e.property&&e.property.value!==i?e.property.value:this._core.current())+s,a=this._core.clones().length,l=t.proxy(function(t,e){this.load(e)},this);for(n.lazyLoadEager>0&&(o+=n.lazyLoadEager,n.loop&&(r-=n.lazyLoadEager,o++));s++<o;)this.load(a/2+this._core.relative(r)),a&&t.each(this._core.clones(this._core.relative(r)),l),r++}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers)};o.Defaults={lazyLoad:!1,lazyLoadEager:0},o.prototype.load=function(n){var i=this._core.$stage.children().eq(n),o=i&&i.find(".owl-lazy");!o||t.inArray(i.get(0),this._loaded)>-1||(o.each(t.proxy(function(n,i){var o,s=t(i),r=e.devicePixelRatio>1&&s.attr("data-src-retina")||s.attr("data-src")||s.attr("data-srcset");this._core.trigger("load",{element:s,url:r},"lazy"),s.is("img")?s.one("load.owl.lazy",t.proxy(function(){s.css("opacity",1),this._core.trigger("loaded",{element:s,url:r},"lazy")},this)).attr("src",r):s.is("source")?s.one("load.owl.lazy",t.proxy(function(){this._core.trigger("loaded",{element:s,url:r},"lazy")},this)).attr("srcset",r):(o=new Image,o.onload=t.proxy(function(){s.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:s,url:r},"lazy")},this),o.src=r)},this)),this._loaded.push(i.get(0)))},o.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(n){this._core=n,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var i=this;t(e).on("load",function(){i._core.settings.autoHeight&&i.update()}),t(e).resize(function(){i._core.settings.autoHeight&&(null!=i._intervalId&&clearTimeout(i._intervalId),i._intervalId=setTimeout(function(){i.update()},250))})};o.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},o.prototype.update=function(){var e=this._core._current,n=e+this._core.settings.items,i=this._core.settings.lazyLoad,o=this._core.$stage.children().toArray().slice(e,n),s=[],r=0;t.each(o,function(e,n){s.push(t(n).height())}),r=Math.max.apply(null,s),r<=1&&i&&this._previousHeight&&(r=this._previousHeight),this._previousHeight=r,this._core.$stage.parent().height(r).addClass(this._core.settings.autoHeightClass)},o.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,t(e.content)))}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};o.Defaults={video:!1,videoHeight:!1,videoWidth:!1},o.prototype.fetch=function(t,e){var n=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),o=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,r=t.attr("href");if(!r)throw new Error("Missing video URL.");if(i=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),i[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[r]={type:n,id:i,width:o,height:s},e.attr("data-video",r),this.thumbnail(t,this._videos[r])},o.prototype.thumbnail=function(e,n){var i,o,s,r=n.width&&n.height?"width:"+n.width+"px;height:"+n.height+"px;":"",a=e.find("img"),l="src",c="",u=this._core.settings,d=function(n){o='<div class="owl-video-play-icon"></div>',i=u.lazyLoad?t("<div/>",{"class":"owl-video-tn "+c,srcType:n}):t("<div/>",{"class":"owl-video-tn",style:"opacity:1;background-image:url("+n+")"}),e.after(i),e.after(o)};return e.wrap(t("<div/>",{"class":"owl-video-wrapper",style:r})),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length?(d(a.attr(l)),a.remove(),!1):void("youtube"===n.type?(s="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",d(s)):"vimeo"===n.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t[0].thumbnail_large,d(s)}}):"vzaar"===n.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t.framegrab_url,d(s)}}))},o.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},o.prototype.play=function(e){var n,i,o=t(e.target),s=o.closest("."+this._core.settings.itemClass),r=this._videos[s.attr("data-video")],a=r.width||"100%",l=r.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),s=this._core.items(this._core.relative(s.index())),this._core.reset(s.index()),n=t('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'),n.attr("height",l),n.attr("width",a),"youtube"===r.type?n.attr("src","//www.youtube.com/embed/"+r.id+"?autoplay=1&rel=0&v="+r.id):"vimeo"===r.type?n.attr("src","//player.vimeo.com/video/"+r.id+"?autoplay=1"):"vzaar"===r.type&&n.attr("src","//view.vzaar.com/"+r.id+"/player?autoplay=true"),i=t(n).wrap('<div class="owl-video-frame" />').insertAfter(s.find(".owl-video")),this._playing=s.addClass("owl-video-playing"))},o.prototype.isInFullScreen=function(){var e=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},o.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this.core=e,this.core.options=t.extend({},o.Defaults,this.core.options),this.swapping=!0,this.previous=i,this.next=i,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};o.Defaults={animateOut:!1,animateIn:!1},o.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,n=t.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),o=this.core.$stage.children().eq(this.next),s=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(t.support.animation.end,n).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(r)),s&&o.one(t.support.animation.end,n).addClass("animated owl-animated-in").addClass(s))}},o.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},o.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var o=function(e){this._core=e,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},o.Defaults,this._core.options)};o.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},o.prototype._next=function(i){this._call=e.setTimeout(t.proxy(this._next,this,i),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||n.hidden||this._core.next(i||this._core.settings.autoplaySpeed)},o.prototype.read=function(){return(new Date).getTime()-this._time},o.prototype.play=function(n,i){var o;this._core.is("rotating")||this._core.enter("rotating"),n=n||this._core.settings.autoplayTimeout,o=Math.min(this._time%(this._timeout||n),n),this._paused?(this._time=this.read(),this._paused=!1):e.clearTimeout(this._call),this._time+=this.read()%n-o,this._timeout=n,this._call=e.setTimeout(t.proxy(this._next,this,i),n-o)},o.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,e.clearTimeout(this._call),this._core.leave("rotating"))},o.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,e.clearTimeout(this._call))},o.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var o=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this.$element.on(this._handlers)};o.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},o.prototype.initialize=function(){var e,n=this._core.settings;this._controls.$relative=(n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=t("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[t('<button role="button">').addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?t(n.dotsContainer):t("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",t.proxy(function(e){var i=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},o.prototype.destroy=function(){var t,e,n,i,o;o=this._core.settings;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&o.navContainer?this._controls[e].html(""):this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},o.prototype.update=function(){var t,e,n,i=this._core.clones().length/2,o=i+this._core.items().length,s=this._core.maximum(!0),r=this._core.settings,a=r.center||r.autoWidth||r.dotsData?1:r.dotsEach||r.items;if("page"!==r.slideBy&&(r.slideBy=Math.min(r.slideBy,r.items)),r.dots||"page"==r.slideBy)for(this._pages=[],t=i,e=0,n=0;t<o;t++){if(e>=a||0===e){if(this._pages.push({start:Math.min(s,t-i),end:t-i+a-1}),Math.min(s,t-i)===s)break;e=0,++n}e+=this._core.mergers(this._core.relative(t))}},o.prototype.draw=function(){var e,n=this._core.settings,i=this._core.items().length<=n.items,o=this._core.relative(this._core.current()),s=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!s&&o<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!s&&o>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(e=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"));
},o.prototype.onTrigger=function(e){var n=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},o.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,t.proxy(function(t,n){return t.start<=e&&t.end>=e},this)).pop()},o.prototype.getPosition=function(e){var n,i,o=this._core.settings;return"page"==o.slideBy?(n=t.inArray(this.current(),this._pages),i=this._pages.length,e?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,e?n+=o.slideBy:n-=o.slideBy),n},o.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},o.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},o.prototype.to=function(e,n,i){var o;!i&&this._pages.length?(o=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%o+o)%o].start,n)):t.proxy(this._overrides.to,this._core)(e,n)},t.fn.owlCarousel.Constructor.Plugins.Navigation=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var o=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=e.content}},this),"changed.owl.carousel":t.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),o=t.map(this._hashes,function(t,e){return t===i?e:null}).join();if(!o||e.location.hash.slice(1)===o)return;e.location.hash=o}},this)},this._core.options=t.extend({},o.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var n=e.location.hash.substring(1),o=this._core.$stage.children(),s=this._hashes[n]&&o.index(this._hashes[n]);s!==i&&s!==this._core.current()&&this._core.to(this._core.relative(s),!1,!0)},this))};o.Defaults={URLhashListener:!1},o.prototype.destroy=function(){var n,i;t(e).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=o}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){function o(e,n){var o=!1,s=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(s+" ")+s).split(" "),function(t,e){if(r[e]!==i)return o=!n||e,!1}),o}function s(t){return o(t,!0)}var r=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c={csstransforms:function(){return!!o("transform")},csstransforms3d:function(){return!!o("perspective")},csstransitions:function(){return!!o("transition")},cssanimations:function(){return!!o("animation")}};c.csstransitions()&&(t.support.transition=new String(s("transition")),t.support.transition.end=l.transition.end[t.support.transition]),c.cssanimations()&&(t.support.animation=new String(s("animation")),t.support.animation.end=l.animation.end[t.support.animation]),c.csstransforms()&&(t.support.transform=new String(s("transform")),t.support.transform3d=c.csstransforms3d())}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";function o(t,e){var i,o,s,r=[],a=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=p(t.data.options,e)),i=e.$target||n(t.currentTarget).trigger("blur"),s=n.fancybox.getInstance(),s&&s.$trigger&&s.$trigger.is(i)||(e.selector?r=n(e.selector):(o=i.attr("data-fancybox")||"",o?(r=t.data?t.data.items:[],r=r.length?r.filter('[data-fancybox="'+o+'"]'):n('[data-fancybox="'+o+'"]')):r=[i]),a=n(r).index(i),a<0&&(a=0),s=n.fancybox.open(r,e,a),s.$trigger=i))}if(t.console=t.console||{info:function(t){}},n){if(n.fn.fancybox)return void console.info("fancyBox already initialized");var s={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},r=n(t),a=n(e),l=0,c=function(t){return t&&t.hasOwnProperty&&t instanceof n},u=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),d=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)}}(),h=function(){var t,n=e.createElement("fakeelement"),o={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in o)if(n.style[t]!==i)return o[t];return"transitionend"}(),f=function(t){return t&&t.length&&t[0].offsetHeight},p=function(t,e){var i=n.extend(!0,{},t,e);return n.each(e,function(t,e){n.isArray(e)&&(i[t]=e)}),i},g=function(t){var i,o;return!(!t||t.ownerDocument!==e)&&(n(".fancybox-container").css("pointer-events","none"),i={x:t.getBoundingClientRect().left+t.offsetWidth/2,y:t.getBoundingClientRect().top+t.offsetHeight/2},o=e.elementFromPoint(i.x,i.y)===t,n(".fancybox-container").css("pointer-events",""),o)},m=function(t,e,i){var o=this;o.opts=p({index:i},n.fancybox.defaults),n.isPlainObject(e)&&(o.opts=p(o.opts,e)),n.fancybox.isMobile&&(o.opts=p(o.opts,o.opts.mobile)),o.id=o.opts.id||++l,o.currIndex=parseInt(o.opts.index,10)||0,o.prevIndex=null,o.prevPos=null,o.currPos=0,o.firstRun=!0,o.group=[],o.slides={},o.addContent(t),o.group.length&&o.init()};n.extend(m.prototype,{init:function(){var i,o,s=this,r=s.group[s.currIndex],a=r.opts;a.closeExisting&&n.fancybox.close(!0),n("body").addClass("fancybox-active"),!n.fancybox.getInstance()&&a.hideScrollbar!==!1&&!n.fancybox.isMobile&&e.body.scrollHeight>t.innerHeight&&(n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(t.innerWidth-e.documentElement.clientWidth)+"px;}</style>"),n("body").addClass("compensate-for-scrollbar")),o="",n.each(a.buttons,function(t,e){o+=a.btnTpl[e]||""}),i=n(s.translate(s,a.baseTpl.replace("{{buttons}}",o).replace("{{arrows}}",a.btnTpl.arrowLeft+a.btnTpl.arrowRight))).attr("id","fancybox-container-"+s.id).addClass(a.baseClass).data("FancyBox",s).appendTo(a.parentEl),s.$refs={container:i},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){s.$refs[t]=i.find(".fancybox-"+t)}),s.trigger("onInit"),s.activate(),s.jumpTo(s.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return n[e]===i?t:n[e]})},addContent:function(t){var e,o=this,s=n.makeArray(t);n.each(s,function(t,e){var s,r,a,l,c,u={},d={};n.isPlainObject(e)?(u=e,d=e.opts||e):"object"===n.type(e)&&n(e).length?(s=n(e),d=s.data()||{},d=n.extend(!0,{},d,d.options),d.$orig=s,u.src=o.opts.src||d.src||s.attr("href"),u.type||u.src||(u.type="inline",u.src=e)):u={type:"html",src:e+""},u.opts=n.extend(!0,{},o.opts,d),n.isArray(d.buttons)&&(u.opts.buttons=d.buttons),n.fancybox.isMobile&&u.opts.mobile&&(u.opts=p(u.opts,u.opts.mobile)),r=u.type||u.opts.type,l=u.src||"",!r&&l&&((a=l.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(r="video",u.opts.video.format||(u.opts.video.format="video/"+("ogv"===a[1]?"ogg":a[1]))):l.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?r="image":l.match(/\.(pdf)((\?|#).*)?$/i)?(r="iframe",u=n.extend(!0,u,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===l.charAt(0)&&(r="inline")),r?u.type=r:o.trigger("objectNeedsType",u),u.contentType||(u.contentType=n.inArray(u.type,["html","inline","ajax"])>-1?"html":u.type),u.index=o.group.length,"auto"==u.opts.smallBtn&&(u.opts.smallBtn=n.inArray(u.type,["html","inline","ajax"])>-1),"auto"===u.opts.toolbar&&(u.opts.toolbar=!u.opts.smallBtn),u.$thumb=u.opts.$thumb||null,u.opts.$trigger&&u.index===o.opts.index&&(u.$thumb=u.opts.$trigger.find("img:first"),u.$thumb.length&&(u.opts.$orig=u.opts.$trigger)),u.$thumb&&u.$thumb.length||!u.opts.$orig||(u.$thumb=u.opts.$orig.find("img:first")),u.$thumb&&!u.$thumb.length&&(u.$thumb=null),u.thumb=u.opts.thumb||(u.$thumb?u.$thumb[0].src:null),"function"===n.type(u.opts.caption)&&(u.opts.caption=u.opts.caption.apply(e,[o,u])),"function"===n.type(o.opts.caption)&&(u.opts.caption=o.opts.caption.apply(e,[o,u])),u.opts.caption instanceof n||(u.opts.caption=u.opts.caption===i?"":u.opts.caption+""),"ajax"===u.type&&(c=l.split(/\s+/,2),c.length>1&&(u.src=c.shift(),u.opts.filter=c.shift())),u.opts.modal&&(u.opts=n.extend(!0,u.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),o.group.push(u)}),Object.keys(o.slides).length&&(o.updateControls(),e=o.Thumbs,e&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),e.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),e.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),e.next()}).on("click.fb","[data-fancybox-zoom]",function(t){e[e.isScaledDown()?"scaleToActual":"scaleToFit"]()}),r.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(e.requestId&&d(e.requestId),e.requestId=u(function(){e.update(t)})):(e.current&&"iframe"===e.current.type&&e.$refs.stage.hide(),setTimeout(function(){e.$refs.stage.show(),e.update(t)},n.fancybox.isMobile?600:250))}),a.on("keydown.fb",function(t){var i=n.fancybox?n.fancybox.getInstance():null,o=i.current,s=t.keyCode||t.which;if(9==s)return void(o.opts.trapFocus&&e.focus(t));if(!(!o.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||n(t.target).is("input,textarea,video,audio,select")))return 8===s||27===s?(t.preventDefault(),void e.close(t)):37===s||38===s?(t.preventDefault(),void e.previous()):39===s||40===s?(t.preventDefault(),void e.next()):void e.trigger("afterKeydown",t,s)}),e.group[e.currIndex].opts.idleTime&&(e.idleSecondsCounter=0,a.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){e.idleSecondsCounter=0,e.isIdle&&e.showControls(),e.isIdle=!1}),e.idleInterval=t.setInterval(function(){e.idleSecondsCounter++,e.idleSecondsCounter>=e.group[e.currIndex].opts.idleTime&&!e.isDragging&&(e.isIdle=!0,e.idleSecondsCounter=0,e.hideControls())},1e3))},removeEvents:function(){var e=this;r.off("orientationchange.fb resize.fb"),a.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),e.idleInterval&&(t.clearInterval(e.idleInterval),e.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,e){var o,s,r,a,l,c,u,d,h,p=this,g=p.group.length;if(!(p.isDragging||p.isClosing||p.isAnimating&&p.firstRun)){if(t=parseInt(t,10),r=p.current?p.current.opts.loop:p.opts.loop,!r&&(t<0||t>=g))return!1;if(o=p.firstRun=!Object.keys(p.slides).length,l=p.current,p.prevIndex=p.currIndex,p.prevPos=p.currPos,a=p.createSlide(t),g>1&&((r||a.index<g-1)&&p.createSlide(t+1),(r||a.index>0)&&p.createSlide(t-1)),p.current=a,p.currIndex=a.index,p.currPos=a.pos,p.trigger("beforeShow",o),p.updateControls(),a.forcedDuration=i,n.isNumeric(e)?a.forcedDuration=e:e=a.opts[o?"animationDuration":"transitionDuration"],e=parseInt(e,10),s=p.isMoved(a),a.$slide.addClass("fancybox-slide--current"),o)return a.opts.animationEffect&&e&&p.$refs.container.css("transition-duration",e+"ms"),p.$refs.container.addClass("fancybox-is-open").trigger("focus"),p.loadSlide(a),void p.preload("image");c=n.fancybox.getTranslate(l.$slide),u=n.fancybox.getTranslate(p.$refs.stage),n.each(p.slides,function(t,e){n.fancybox.stop(e.$slide,!0)}),l.pos!==a.pos&&(l.isComplete=!1),l.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),s?(h=c.left-(l.pos*c.width+l.pos*l.opts.gutter),n.each(p.slides,function(t,i){i.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var o=i.pos*c.width+i.pos*i.opts.gutter;n.fancybox.setTranslate(i.$slide,{top:0,left:o-u.left+h}),i.pos!==a.pos&&i.$slide.addClass("fancybox-slide--"+(i.pos>a.pos?"next":"previous")),f(i.$slide),n.fancybox.animate(i.$slide,{top:0,left:(i.pos-a.pos)*c.width+(i.pos-a.pos)*i.opts.gutter},e,function(){i.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===p.currPos&&p.complete()})})):e&&a.opts.transitionEffect&&(d="fancybox-animated fancybox-fx-"+a.opts.transitionEffect,l.$slide.addClass("fancybox-slide--"+(l.pos>a.pos?"next":"previous")),n.fancybox.animate(l.$slide,d,e,function(){l.$slide.removeClass(d).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),a.isLoaded?p.revealContent(a):p.loadSlide(a),p.preload("image")}},createSlide:function(t){var e,i,o=this;return i=t%o.group.length,i=i<0?o.group.length+i:i,!o.slides[t]&&o.group[i]&&(e=n('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[t]=n.extend(!0,{},o.group[i],{pos:t,$slide:e,isLoaded:!1}),o.updateSlide(o.slides[t])),o.slides[t]},scaleToActual:function(t,e,o){var s,r,a,l,c,u=this,d=u.current,h=d.$content,f=n.fancybox.getTranslate(d.$slide).width,p=n.fancybox.getTranslate(d.$slide).height,g=d.width,m=d.height;u.isAnimating||u.isMoved()||!h||"image"!=d.type||!d.isLoaded||d.hasError||(u.isAnimating=!0,n.fancybox.stop(h),t=t===i?.5*f:t,e=e===i?.5*p:e,s=n.fancybox.getTranslate(h),s.top-=n.fancybox.getTranslate(d.$slide).top,s.left-=n.fancybox.getTranslate(d.$slide).left,l=g/s.width,c=m/s.height,r=.5*f-.5*g,a=.5*p-.5*m,g>f&&(r=s.left*l-(t*l-t),r>0&&(r=0),r<f-g&&(r=f-g)),m>p&&(a=s.top*c-(e*c-e),a>0&&(a=0),a<p-m&&(a=p-m)),u.updateCursor(g,m),n.fancybox.animate(h,{top:a,left:r,scaleX:l,scaleY:c},o||366,function(){u.isAnimating=!1}),u.SlideShow&&u.SlideShow.isActive&&u.SlideShow.stop())},scaleToFit:function(t){var e,i=this,o=i.current,s=o.$content;i.isAnimating||i.isMoved()||!s||"image"!=o.type||!o.isLoaded||o.hasError||(i.isAnimating=!0,n.fancybox.stop(s),e=i.getFitPos(o),i.updateCursor(e.width,e.height),n.fancybox.animate(s,{top:e.top,left:e.left,scaleX:e.width/s.width(),scaleY:e.height/s.height()},t||366,function(){i.isAnimating=!1}))},getFitPos:function(t){var e,i,o,s,r=this,a=t.$content,l=t.$slide,c=t.width||t.opts.width,u=t.height||t.opts.height,d={};return!!(t.isLoaded&&a&&a.length)&&(e=n.fancybox.getTranslate(r.$refs.stage).width,i=n.fancybox.getTranslate(r.$refs.stage).height,e-=parseFloat(l.css("paddingLeft"))+parseFloat(l.css("paddingRight"))+parseFloat(a.css("marginLeft"))+parseFloat(a.css("marginRight")),i-=parseFloat(l.css("paddingTop"))+parseFloat(l.css("paddingBottom"))+parseFloat(a.css("marginTop"))+parseFloat(a.css("marginBottom")),c&&u||(c=e,u=i),o=Math.min(1,e/c,i/u),c=o*c,u=o*u,c>e-.5&&(c=e),u>i-.5&&(u=i),"image"===t.type?(d.top=Math.floor(.5*(i-u))+parseFloat(l.css("paddingTop")),d.left=Math.floor(.5*(e-c))+parseFloat(l.css("paddingLeft"))):"video"===t.contentType&&(s=t.opts.width&&t.opts.height?c/u:t.opts.ratio||16/9,u>c/s?u=c/s:c>u*s&&(c=u*s)),d.width=c,d.height=u,d)},update:function(t){var e=this;n.each(e.slides,function(n,i){e.updateSlide(i,t)})},updateSlide:function(t,e){var i=this,o=t&&t.$content,s=t.width||t.opts.width,r=t.height||t.opts.height,a=t.$slide;i.adjustCaption(t),o&&(s||r||"video"===t.contentType)&&!t.hasError&&(n.fancybox.stop(o),n.fancybox.setTranslate(o,i.getFitPos(t)),t.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),i.adjustLayout(t),a.length&&(a.trigger("refresh"),t.pos===i.currPos&&i.$refs.toolbar.add(i.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",a.get(0).scrollHeight>a.get(0).clientHeight)),i.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,o=e.current,s=o.$slide;!e.isClosing&&o&&(s.siblings().css({transform:"",opacity:""}),s.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),n.fancybox.animate(s,{top:0,left:0,opacity:1},t===i?0:t,function(){s.css({transform:"",opacity:""}),o.isComplete||e.complete()},!1))},isMoved:function(t){var e,i,o=t||this.current;return!!o&&(i=n.fancybox.getTranslate(this.$refs.stage),e=n.fancybox.getTranslate(o.$slide),!o.$slide.hasClass("fancybox-animated")&&(Math.abs(e.top-i.top)>.5||Math.abs(e.left-i.left)>.5))},updateCursor:function(t,e){var i,o,s=this,r=s.current,a=s.$refs.container;r&&!s.isClosing&&s.Guestures&&(a.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),i=s.canPan(t,e),o=!!i||s.isZoomable(),a.toggleClass("fancybox-is-zoomable",o),n("[data-fancybox-zoom]").prop("disabled",!o),i?a.addClass("fancybox-can-pan"):o&&("zoom"===r.opts.clickContent||n.isFunction(r.opts.clickContent)&&"zoom"==r.opts.clickContent(r))?a.addClass("fancybox-can-zoomIn"):r.opts.touch&&(r.opts.touch.vertical||s.group.length>1)&&"video"!==r.contentType&&a.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this,n=e.current;if(n&&!e.isClosing&&"image"===n.type&&!n.hasError){if(!n.isLoaded)return!0;if(t=e.getFitPos(n),t&&(n.width>t.width||n.height>t.height))return!0}return!1},isScaledDown:function(t,e){var o=this,s=!1,r=o.current,a=r.$content;return t!==i&&e!==i?s=t<r.width&&e<r.height:a&&(s=n.fancybox.getTranslate(a),s=s.width<r.width&&s.height<r.height),s},canPan:function(t,e){var o=this,s=o.current,r=null,a=!1;return"image"===s.type&&(s.isComplete||t&&e)&&!s.hasError&&(a=o.getFitPos(s),t!==i&&e!==i?r={width:t,height:e}:s.isComplete&&(r=n.fancybox.getTranslate(s.$content)),r&&a&&(a=Math.abs(r.width-a.width)>1.5||Math.abs(r.height-a.height)>1.5)),a},loadSlide:function(t){var e,i,o,s=this;if(!t.isLoading&&!t.isLoaded){if(t.isLoading=!0,s.trigger("beforeLoad",t)===!1)return t.isLoading=!1,!1;switch(e=t.type,i=t.$slide,i.off("refresh").trigger("onReset").addClass(t.opts.slideClass),e){case"image":s.setImage(t);break;case"iframe":s.setIframe(t);break;case"html":s.setContent(t,t.src||t.content);break;case"video":s.setContent(t,t.opts.video.tpl.replace(/\{\{src\}\}/gi,t.src).replace("{{format}}",t.opts.videoFormat||t.opts.video.format||"").replace("{{poster}}",t.thumb||""));break;case"inline":n(t.src).length?s.setContent(t,n(t.src)):s.setError(t);break;case"ajax":s.showLoading(t),o=n.ajax(n.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,n){"success"===n&&s.setContent(t,e)},error:function(e,n){e&&"abort"!==n&&s.setError(t)}})),i.one("onReset",function(){o.abort()});break;default:s.setError(t)}return!0}},setImage:function(t){var i,o=this;setTimeout(function(){var e=t.$image;o.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||o.showLoading(t)},50),o.checkSrcset(t),t.$content=n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),t.opts.preload!==!1&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,i=e.createElement("img"),i.onerror=function(){n(this).remove(),t.$ghost=null},i.onload=function(){o.afterLoad(t)},t.$ghost=n(i).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),o.setBigImage(t)},checkSrcset:function(e){var n,i,o,s,r=e.opts.srcset||e.opts.image.srcset;if(r){o=t.devicePixelRatio||1,s=t.innerWidth*o,i=r.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,n){var i=parseInt(t.substring(0,t.length-1),10);return 0===n?e.url=t:void(i&&(e.value=i,e.postfix=t[t.length-1]))}),e}),i.sort(function(t,e){return t.value-e.value});for(var a=0;a<i.length;a++){var l=i[a];if("w"===l.postfix&&l.value>=s||"x"===l.postfix&&l.value>=o){n=l;break}}!n&&i.length&&(n=i[i.length-1]),n&&(e.src=n.url,e.width&&e.height&&"w"==n.postfix&&(e.height=e.width/e.height*n.value,e.width=n.value),e.opts.srcset=r)}},setBigImage:function(t){var i=this,o=e.createElement("img"),s=n(o);t.$image=s.one("error",function(){i.setError(t)}).one("load",function(){var e;t.$ghost||(i.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),i.afterLoad(t)),i.isClosing||(t.opts.srcset&&(e=t.opts.sizes,e&&"auto"!==e||(e=(t.width/t.height>1&&r.width()/r.height()>1?"100":Math.round(t.width/t.height*100))+"vw"),s.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!i.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),i.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(o.complete||"complete"==o.readyState)&&s.naturalWidth&&s.naturalHeight?s.trigger("load"):o.error&&s.trigger("error")},resolveImageSlideSize:function(t,e,n){var i=parseInt(t.opts.width,10),o=parseInt(t.opts.height,10);t.width=e,t.height=n,i>0&&(t.width=i,t.height=Math.floor(i*n/e)),o>0&&(t.width=Math.floor(o*e/n),t.height=o)},setIframe:function(t){var e,o=this,s=t.opts.iframe,r=t.$slide;t.$content=n('<div class="fancybox-content'+(s.preload?" fancybox-is-hidden":"")+'"></div>').css(s.css).appendTo(r),r.addClass("fancybox-slide--"+t.contentType),t.$iframe=e=n(s.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(s.attr).appendTo(t.$content),s.preload?(o.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),o.afterLoad(t)}),r.on("refresh.fb",function(){var n,o,a=t.$content,l=s.css.width,c=s.css.height;if(1===e[0].isReady){try{n=e.contents(),o=n.find("body")}catch(u){}o&&o.length&&o.children().length&&(r.css("overflow","visible"),a.css({width:"100%","max-width":"100%",height:"9999px"}),l===i&&(l=Math.ceil(Math.max(o[0].clientWidth,o.outerWidth(!0)))),a.css("width",l?l:"").css("max-width",""),c===i&&(c=Math.ceil(Math.max(o[0].clientHeight,o.outerHeight(!0)))),a.css("height",c?c:""),r.css("overflow","auto")),a.removeClass("fancybox-is-hidden")}})):o.afterLoad(t),e.attr("src",t.src),r.one("onReset",function(){try{n(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}n(this).off("refresh.fb").empty(),t.isLoaded=!1,t.isRevealed=!1})},setContent:function(t,e){var i=this;i.isClosing||(i.hideLoading(t),t.$content&&n.fancybox.stop(t.$content),t.$slide.empty(),c(e)&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=n("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===n.type(e)&&(e=n("<div>").append(n.trim(e)).contents()),t.opts.filter&&(e=n("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){n(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),n(e).appendTo(t.$slide),n(e).is("video,audio")&&(n(e).addClass("fancybox-video"),n(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||n(e).attr("width"),t.opts.height=t.opts.height||n(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),i.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){var e=this;t=t||e.current,t&&!t.$spinner&&(t.$spinner=n(e.translate(e,e.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){var e=this;t=t||e.current,t&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=n(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t))},adjustCaption:function(t){var e,n=this,i=t||n.current,o=i.opts.caption,s=i.opts.preventCaptionOverlap,r=n.$refs.caption,a=!1;r.toggleClass("fancybox-caption--separate",s),s&&o&&o.length&&(i.pos!==n.currPos?(e=r.clone().appendTo(r.parent()),e.children().eq(0).empty().html(o),a=e.outerHeight(!0),e.empty().remove()):n.$caption&&(a=n.$caption.outerHeight(!0)),i.$slide.css("padding-bottom",a||""))},adjustLayout:function(t){var e,n,i,o,s=this,r=t||s.current;r.isLoaded&&r.opts.disableLayoutFix!==!0&&(r.$content.css("margin-bottom",""),r.$content.outerHeight()>r.$slide.height()+.5&&(i=r.$slide[0].style["padding-bottom"],o=r.$slide.css("padding-bottom"),parseFloat(o)>0&&(e=r.$slide[0].scrollHeight,r.$slide.css("padding-bottom",0),Math.abs(e-r.$slide[0].scrollHeight)<1&&(n=o),r.$slide.css("padding-bottom",i))),r.$content.css("margin-bottom",n))},revealContent:function(t){var e,o,s,r,a=this,l=t.$slide,c=!1,u=!1,d=a.isMoved(t),h=t.isRevealed;return t.isRevealed=!0,e=t.opts[a.firstRun?"animationEffect":"transitionEffect"],s=t.opts[a.firstRun?"animationDuration":"transitionDuration"],s=parseInt(t.forcedDuration===i?s:t.forcedDuration,10),!d&&t.pos===a.currPos&&s||(e=!1),"zoom"===e&&(t.pos===a.currPos&&s&&"image"===t.type&&!t.hasError&&(u=a.getThumbPos(t))?c=a.getFitPos(t):e="fade"),"zoom"===e?(a.isAnimating=!0,c.scaleX=c.width/u.width,c.scaleY=c.height/u.height,r=t.opts.zoomOpacity,"auto"==r&&(r=Math.abs(t.width/t.height-u.width/u.height)>.1),r&&(u.opacity=.1,c.opacity=1),n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),u),f(t.$content),void n.fancybox.animate(t.$content,c,s,function(){a.isAnimating=!1,a.complete()})):(a.updateSlide(t),e?(n.fancybox.stop(l),o="fancybox-slide--"+(t.pos>=a.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,l.addClass(o).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),f(l),"image"!==t.type&&t.$content.hide().show(0),void n.fancybox.animate(l,"fancybox-slide--current",s,function(){l.removeClass(o).css({transform:"",opacity:""}),
t.pos===a.currPos&&a.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),h||!d||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===a.currPos&&a.complete())))},getThumbPos:function(t){var e,i,o,s,r,a=!1,l=t.$thumb;return!(!l||!g(l[0]))&&(e=n.fancybox.getTranslate(l),i=parseFloat(l.css("border-top-width")||0),o=parseFloat(l.css("border-right-width")||0),s=parseFloat(l.css("border-bottom-width")||0),r=parseFloat(l.css("border-left-width")||0),a={top:e.top+i,left:e.left+r,width:e.width-o-r,height:e.height-i-s,scaleX:1,scaleY:1},e.width>0&&e.height>0&&a)},complete:function(){var t,e=this,i=e.current,o={};!e.isMoved()&&i.isLoaded&&(i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),e.preload("inline"),f(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?o[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.off().remove())}),e.slides=o),e.isAnimating=!1,e.updateCursor(),e.trigger("afterShow"),i.opts.video.autoStart&&i.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),e.next()}),i.opts.autoFocus&&"html"===i.contentType&&(t=i.$content.find("input[autofocus]:enabled:visible:first"),t.length?t.trigger("focus"):e.focus(null,!0)),i.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,n,i=this;i.group.length<2||(n=i.slides[i.currPos+1],e=i.slides[i.currPos-1],e&&e.type===t&&i.loadSlide(e),n&&n.type===t&&i.loadSlide(n))},focus:function(t,i){var o,s,r=this,a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");r.isClosing||(o=!t&&r.current&&r.current.isComplete?r.current.$slide.find("*:visible"+(i?":not(.fancybox-close-small)":"")):r.$refs.container.find("*:visible"),o=o.filter(a).filter(function(){return"hidden"!==n(this).css("visibility")&&!n(this).hasClass("disabled")}),o.length?(s=o.index(e.activeElement),t&&t.shiftKey?(s<0||0==s)&&(t.preventDefault(),o.eq(o.length-1).trigger("focus")):(s<0||s==o.length-1)&&(t&&t.preventDefault(),o.eq(0).trigger("focus"))):r.$refs.container.trigger("focus"))},activate:function(){var t=this;n(".fancybox-container").each(function(){var e=n(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t,e){var i,o,s,r,a,l,c,d=this,h=d.current,p=function(){d.cleanUp(t)};return!d.isClosing&&(d.isClosing=!0,d.trigger("beforeClose",t)===!1?(d.isClosing=!1,u(function(){d.update()}),!1):(d.removeEvents(),s=h.$content,i=h.opts.animationEffect,o=n.isNumeric(e)?e:i?h.opts.animationDuration:0,h.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),t!==!0?n.fancybox.stop(h.$slide):i=!1,h.$slide.siblings().trigger("onReset").remove(),o&&d.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",o+"ms"),d.hideLoading(h),d.hideControls(!0),d.updateCursor(),"zoom"!==i||s&&o&&"image"===h.type&&!d.isMoved()&&!h.hasError&&(c=d.getThumbPos(h))||(i="fade"),"zoom"===i?(n.fancybox.stop(s),r=n.fancybox.getTranslate(s),l={top:r.top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},a=h.opts.zoomOpacity,"auto"==a&&(a=Math.abs(h.width/h.height-c.width/c.height)>.1),a&&(c.opacity=0),n.fancybox.setTranslate(s,l),f(s),n.fancybox.animate(s,c,o,p),!0):(i&&o?n.fancybox.animate(h.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,o,p):t===!0?setTimeout(p,o):p(),!0)))},cleanUp:function(e){var i,o,s,r=this,a=r.current.opts.$orig;r.current.$slide.trigger("onReset"),r.$refs.container.empty().remove(),r.trigger("afterClose",e),r.current.opts.backFocus&&(a&&a.length&&a.is(":visible")||(a=r.$trigger),a&&a.length&&(o=t.scrollX,s=t.scrollY,a.trigger("focus"),n("html, body").scrollTop(s).scrollLeft(o))),r.current=null,i=n.fancybox.getInstance(),i?i.activate():(n("body").removeClass("fancybox-active compensate-for-scrollbar"),n("#fancybox-style-noscroll").remove())},trigger:function(t,e){var i,o=Array.prototype.slice.call(arguments,1),s=this,r=e&&e.opts?e:s.current;return r?o.unshift(r):r=s,o.unshift(s),n.isFunction(r.opts[t])&&(i=r.opts[t].apply(r,o)),i===!1?i:void("afterClose"!==t&&s.$refs?s.$refs.container.trigger(t+".fb",o):a.trigger(t+".fb",o))},updateControls:function(){var t=this,i=t.current,o=i.index,s=t.$refs.container,r=t.$refs.caption,a=i.opts.caption;i.$slide.trigger("refresh"),a&&a.length?(t.$caption=r,r.children().eq(0).html(a)):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),s.find("[data-fancybox-count]").html(t.group.length),s.find("[data-fancybox-index]").html(o+1),s.find("[data-fancybox-prev]").prop("disabled",!i.opts.loop&&o<=0),s.find("[data-fancybox-next]").prop("disabled",!i.opts.loop&&o>=t.group.length-1),"image"===i.type?s.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",i.opts.image.src||i.src).show():i.opts.toolbar&&s.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),n(e.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=this,n=["infobar","toolbar","nav"];!t&&e.current.opts.preventCaptionOverlap||n.push("caption"),this.$refs.container.removeClass(n.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this,e=t.current?t.current.opts:t.opts,n=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&t.group.length>1)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&t.group.length>1)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.5.7",defaults:s,getInstance:function(t){var e=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return e instanceof m&&("string"===n.type(t)?e[t].apply(e,i):"function"===n.type(t)&&t.apply(e,i),e)},open:function(t,e,n){return new m(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),t===!0&&this.close(t))},destroy:function(){this.close(!0),a.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=e.createElement("div");return t.getComputedStyle&&t.getComputedStyle(n)&&t.getComputedStyle(n).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<11)}(),getTranslate:function(t){var e;return!(!t||!t.length)&&(e=t[0].getBoundingClientRect(),{top:e.top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))})},setTranslate:function(t,e){var n="",o={};if(t&&e)return e.left===i&&e.top===i||(n=(e.left===i?t.position().left:e.left)+"px, "+(e.top===i?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),e.scaleX!==i&&e.scaleY!==i?n+=" scale("+e.scaleX+", "+e.scaleY+")":e.scaleX!==i&&(n+=" scaleX("+e.scaleX+")"),n.length&&(o.transform=n),e.opacity!==i&&(o.opacity=e.opacity),e.width!==i&&(o.width=e.width),e.height!==i&&(o.height=e.height),t.css(o)},animate:function(t,e,o,s,r){var a,l=this;n.isFunction(o)&&(s=o,o=null),l.stop(t),a=l.getTranslate(t),t.on(h,function(c){(!c||!c.originalEvent||t.is(c.originalEvent.target)&&"z-index"!=c.originalEvent.propertyName)&&(l.stop(t),n.isNumeric(o)&&t.css("transition-duration",""),n.isPlainObject(e)?e.scaleX!==i&&e.scaleY!==i&&l.setTranslate(t,{top:e.top,left:e.left,width:a.width*e.scaleX,height:a.height*e.scaleY,scaleX:1,scaleY:1}):r!==!0&&t.removeClass(e),n.isFunction(s)&&s(c))}),n.isNumeric(o)&&t.css("transition-duration",o+"ms"),n.isPlainObject(e)?(e.scaleX!==i&&e.scaleY!==i&&(delete e.width,delete e.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),n.fancybox.setTranslate(t,e)):t.addClass(e),t.data("timer",setTimeout(function(){t.trigger(h)},o+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(h),t.off(h).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},n.fn.fancybox=function(t){var e;return t=t||{},e=t.selector||!1,e?n("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},o):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},o),this},a.on("click.fb-start","[data-fancybox]",o),a.on("click.fb-start","[data-fancybox-trigger]",function(t){n('[data-fancybox="'+n(this).attr("data-fancybox-trigger")+'"]').eq(n(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:n(this)})}),function(){var t=".fancybox-button",e="fancybox-focus",i=null;a.on("mousedown mouseup focus blur",t,function(o){switch(o.type){case"mousedown":i=n(this);break;case"mouseup":i=null;break;case"focusin":n(t).removeClass(e),n(this).is(i)||n(this).is("[disabled]")||n(this).addClass(e);break;case"focusout":n(t).removeClass(e)}})}()}}(window,document,jQuery),function(t){"use strict";var e={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}},n=function(e,n,i){if(e)return i=i||"","object"===t.type(i)&&(i=t.param(i,!0)),t.each(n,function(t,n){e=e.replace("$"+t,n||"")}),i.length&&(e+=(e.indexOf("?")>0?"&":"?")+i),e};t(document).on("objectNeedsType.fb",function(i,o,s){var r,a,l,c,u,d,h,f=s.src||"",p=!1;r=t.extend(!0,{},e,s.opts.media),t.each(r,function(e,i){if(l=f.match(i.matcher)){if(p=i.type,h=e,d={},i.paramPlace&&l[i.paramPlace]){u=l[i.paramPlace],"?"==u[0]&&(u=u.substring(1)),u=u.split("&");for(var o=0;o<u.length;++o){var r=u[o].split("=",2);2==r.length&&(d[r[0]]=decodeURIComponent(r[1].replace(/\+/g," ")))}}return c=t.extend(!0,{},i.params,s.opts[e],d),f="function"===t.type(i.url)?i.url.call(this,l,c,s):n(i.url,l,c),a="function"===t.type(i.thumb)?i.thumb.call(this,l,c,s):n(i.thumb,l),"youtube"===e?f=f.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===e&&(f=f.replace("&%23","#")),!1}}),p?(s.opts.thumb||s.opts.$thumb&&s.opts.$thumb.length||(s.opts.thumb=a),"iframe"===p&&(s.opts=t.extend(!0,s.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),t.extend(s,{type:p,src:f,origSrc:s.src,contentSource:h,contentType:"image"===p?"image":"gmap_place"==h||"gmap_search"==h?"map":"video"})):f&&(s.type=s.opts.defaultType)});var i={youtube:{src:"https://www.youtube.com/iframe_api","class":"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js","class":"Vimeo",loading:!1,loaded:!1},load:function(t){var e,n=this;return this[t].loaded?void setTimeout(function(){n.done(t)}):void(this[t].loading||(this[t].loading=!0,e=document.createElement("script"),e.type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){n[t].loaded=!0,n.done(t)}:e.onload=function(){n[t].loaded=!0,n.done(t)},document.body.appendChild(e)))},done:function(e){var n,i,o;"youtube"===e&&delete window.onYouTubeIframeAPIReady,n=t.fancybox.getInstance(),n&&(i=n.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?o=new YT.Player(i.attr("id"),{events:{onStateChange:function(t){0==t.data&&n.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&(o=new Vimeo.Player(i),o.on("ended",function(){n.next()})))}};t(document).on({"afterShow.fb":function(t,e,n){e.group.length>1&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&i.load(n.contentSource)}})}(jQuery),function(t,e,n){"use strict";var i=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),o=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)}}(),s=function(e){var n=[];e=e.originalEvent||e||t.e,e=e.touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e];for(var i in e)e[i].pageX?n.push({x:e[i].pageX,y:e[i].pageY}):e[i].clientX&&n.push({x:e[i].clientX,y:e[i].clientY});return n},r=function(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},a=function(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||n.isFunction(t.get(0).onclick)||t.data("selectable"))return!0;for(var e=0,i=t[0].attributes,o=i.length;e<o;e++)if("data-fancybox-"===i[e].nodeName.substr(0,14))return!0;return!1},l=function(e){var n=t.getComputedStyle(e)["overflow-y"],i=t.getComputedStyle(e)["overflow-x"],o=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,s=("scroll"===i||"auto"===i)&&e.scrollWidth>e.clientWidth;return o||s},c=function(t){for(var e=!1;;){if(e=l(t.get(0)))break;if(t=t.parent(),!t.length||t.hasClass("fancybox-stage")||t.is("body"))break}return e},u=function(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(e,"ontouchstart"))};u.prototype.destroy=function(){var t=this;t.$container.off(".fb.touch"),n(e).off(".fb.touch"),t.requestId&&(o(t.requestId),t.requestId=null),t.tapped&&(clearTimeout(t.tapped),t.tapped=null)},u.prototype.ontouchstart=function(i){var o=this,l=n(i.target),u=o.instance,d=u.current,h=d.$slide,f=d.$content,p="touchstart"==i.type;if(p&&o.$container.off("mousedown.fb.touch"),(!i.originalEvent||2!=i.originalEvent.button)&&h.length&&l.length&&!a(l)&&!a(l.parent())&&(l.is("img")||!(i.originalEvent.clientX>l[0].clientWidth+l.offset().left))){if(!d||u.isAnimating||d.$slide.hasClass("fancybox-animated"))return i.stopPropagation(),void i.preventDefault();o.realPoints=o.startPoints=s(i),o.startPoints.length&&(d.touch&&i.stopPropagation(),o.startEvent=i,o.canTap=!0,o.$target=l,o.$content=f,o.opts=d.opts.touch,o.isPanning=!1,o.isSwiping=!1,o.isZooming=!1,o.isScrolling=!1,o.canPan=u.canPan(),o.startTime=(new Date).getTime(),o.distanceX=o.distanceY=o.distance=0,o.canvasWidth=Math.round(h[0].clientWidth),o.canvasHeight=Math.round(h[0].clientHeight),o.contentLastPos=null,o.contentStartPos=n.fancybox.getTranslate(o.$content)||{top:0,left:0},o.sliderStartPos=n.fancybox.getTranslate(h),o.stagePos=n.fancybox.getTranslate(u.$refs.stage),o.sliderStartPos.top-=o.stagePos.top,o.sliderStartPos.left-=o.stagePos.left,o.contentStartPos.top-=o.stagePos.top,o.contentStartPos.left-=o.stagePos.left,n(e).off(".fb.touch").on(p?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(o,"ontouchend")).on(p?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(o,"ontouchmove")),n.fancybox.isMobile&&e.addEventListener("scroll",o.onscroll,!0),((o.opts||o.canPan)&&(l.is(o.$stage)||o.$stage.find(l).length)||(l.is(".fancybox-image")&&i.preventDefault(),n.fancybox.isMobile&&l.parents(".fancybox-caption").length))&&(o.isScrollable=c(l)||c(l.parent()),n.fancybox.isMobile&&o.isScrollable||i.preventDefault(),(1===o.startPoints.length||d.hasError)&&(o.canPan?(n.fancybox.stop(o.$content),o.isPanning=!0):o.isSwiping=!0,o.$container.addClass("fancybox-is-grabbing")),2===o.startPoints.length&&"image"===d.type&&(d.isLoaded||d.$ghost)&&(o.canTap=!1,o.isSwiping=!1,o.isPanning=!1,o.isZooming=!0,n.fancybox.stop(o.$content),o.centerPointStartX=.5*(o.startPoints[0].x+o.startPoints[1].x)-n(t).scrollLeft(),o.centerPointStartY=.5*(o.startPoints[0].y+o.startPoints[1].y)-n(t).scrollTop(),o.percentageOfImageAtPinchPointX=(o.centerPointStartX-o.contentStartPos.left)/o.contentStartPos.width,o.percentageOfImageAtPinchPointY=(o.centerPointStartY-o.contentStartPos.top)/o.contentStartPos.height,o.startDistanceBetweenFingers=r(o.startPoints[0],o.startPoints[1]))))}},u.prototype.onscroll=function(t){var n=this;n.isScrolling=!0,e.removeEventListener("scroll",n.onscroll,!0)},u.prototype.ontouchmove=function(t){var e=this;return void 0!==t.originalEvent.buttons&&0===t.originalEvent.buttons?void e.ontouchend(t):e.isScrolling?void(e.canTap=!1):(e.newPoints=s(t),void((e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&e.isSwiping===!0||t.preventDefault(),e.distanceX=r(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=r(e.newPoints[0],e.startPoints[0],"y"),e.distance=r(e.newPoints[0],e.startPoints[0]),e.distance>0&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))))},u.prototype.onSwipe=function(e){var s,r=this,a=r.instance,l=r.isSwiping,c=r.sliderStartPos.left||0;if(l!==!0)"x"==l&&(r.distanceX>0&&(r.instance.group.length<2||0===r.instance.current.index&&!r.instance.current.opts.loop)?c+=Math.pow(r.distanceX,.8):r.distanceX<0&&(r.instance.group.length<2||r.instance.current.index===r.instance.group.length-1&&!r.instance.current.opts.loop)?c-=Math.pow(-r.distanceX,.8):c+=r.distanceX),r.sliderLastPos={top:"x"==l?0:r.sliderStartPos.top+r.distanceY,left:c},r.requestId&&(o(r.requestId),r.requestId=null),r.requestId=i(function(){r.sliderLastPos&&(n.each(r.instance.slides,function(t,e){var i=e.pos-r.instance.currPos;n.fancybox.setTranslate(e.$slide,{top:r.sliderLastPos.top,left:r.sliderLastPos.left+i*r.canvasWidth+i*e.opts.gutter})}),r.$container.addClass("fancybox-is-sliding"))});else if(Math.abs(r.distance)>10){if(r.canTap=!1,a.group.length<2&&r.opts.vertical?r.isSwiping="y":a.isDragging||r.opts.vertical===!1||"auto"===r.opts.vertical&&n(t).width()>800?r.isSwiping="x":(s=Math.abs(180*Math.atan2(r.distanceY,r.distanceX)/Math.PI),r.isSwiping=s>45&&s<135?"y":"x"),"y"===r.isSwiping&&n.fancybox.isMobile&&r.isScrollable)return void(r.isScrolling=!0);a.isDragging=r.isSwiping,r.startPoints=r.newPoints,n.each(a.slides,function(t,e){var i,o;n.fancybox.stop(e.$slide),i=n.fancybox.getTranslate(e.$slide),o=n.fancybox.getTranslate(a.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===a.current.pos&&(r.sliderStartPos.top=i.top-o.top,r.sliderStartPos.left=i.left-o.left),n.fancybox.setTranslate(e.$slide,{top:i.top-o.top,left:i.left-o.left})}),a.SlideShow&&a.SlideShow.isActive&&a.SlideShow.stop()}},u.prototype.onPan=function(){var t=this;return r(t.newPoints[0],t.realPoints[0])<(n.fancybox.isMobile?10:5)?void(t.startPoints=t.newPoints):(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&o(t.requestId),void(t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})))},u.prototype.limitMovement=function(){var t,e,n,i,o,s,r=this,a=r.canvasWidth,l=r.canvasHeight,c=r.distanceX,u=r.distanceY,d=r.contentStartPos,h=d.left,f=d.top,p=d.width,g=d.height;return o=p>a?h+c:h,s=f+u,t=Math.max(0,.5*a-.5*p),e=Math.max(0,.5*l-.5*g),n=Math.min(a-p,.5*a-.5*p),i=Math.min(l-g,.5*l-.5*g),c>0&&o>t&&(o=t-1+Math.pow(-t+h+c,.8)||0),c<0&&o<n&&(o=n+1-Math.pow(n-h-c,.8)||0),u>0&&s>e&&(s=e-1+Math.pow(-e+f+u,.8)||0),u<0&&s<i&&(s=i+1-Math.pow(i-f-u,.8)||0),{top:s,left:o}},u.prototype.limitPosition=function(t,e,n,i){var o=this,s=o.canvasWidth,r=o.canvasHeight;return n>s?(t=t>0?0:t,t=t<s-n?s-n:t):t=Math.max(0,s/2-n/2),i>r?(e=e>0?0:e,e=e<r-i?r-i:e):e=Math.max(0,r/2-i/2),{top:e,left:t}},u.prototype.onZoom=function(){var e=this,s=e.contentStartPos,a=s.width,l=s.height,c=s.left,u=s.top,d=r(e.newPoints[0],e.newPoints[1]),h=d/e.startDistanceBetweenFingers,f=Math.floor(a*h),p=Math.floor(l*h),g=(a-f)*e.percentageOfImageAtPinchPointX,m=(l-p)*e.percentageOfImageAtPinchPointY,v=(e.newPoints[0].x+e.newPoints[1].x)/2-n(t).scrollLeft(),y=(e.newPoints[0].y+e.newPoints[1].y)/2-n(t).scrollTop(),b=v-e.centerPointStartX,_=y-e.centerPointStartY,w=c+(g+b),x=u+(m+_),C={top:x,left:w,scaleX:h,scaleY:h};e.canTap=!1,e.newWidth=f,e.newHeight=p,e.contentLastPos=C,e.requestId&&o(e.requestId),e.requestId=i(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)})},u.prototype.ontouchend=function(t){var i=this,r=i.isSwiping,a=i.isPanning,l=i.isZooming,c=i.isScrolling;return i.endPoints=s(t),i.dMs=Math.max((new Date).getTime()-i.startTime,1),i.$container.removeClass("fancybox-is-grabbing"),n(e).off(".fb.touch"),e.removeEventListener("scroll",i.onscroll,!0),i.requestId&&(o(i.requestId),i.requestId=null),i.isSwiping=!1,i.isPanning=!1,i.isZooming=!1,i.isScrolling=!1,i.instance.isDragging=!1,i.canTap?i.onTap(t):(i.speed=100,i.velocityX=i.distanceX/i.dMs*.5,i.velocityY=i.distanceY/i.dMs*.5,void(a?i.endPanning():l?i.endZooming():i.endSwiping(r,c)))},u.prototype.endSwiping=function(t,e){var i=this,o=!1,s=i.instance.group.length,r=Math.abs(i.distanceX),a="x"==t&&s>1&&(i.dMs>130&&r>10||r>50),l=300;i.sliderLastPos=null,"y"==t&&!e&&Math.abs(i.distanceY)>50?(n.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),o=i.instance.close(!0,250)):a&&i.distanceX>0?o=i.instance.previous(l):a&&i.distanceX<0&&(o=i.instance.next(l)),o!==!1||"x"!=t&&"y"!=t||i.instance.centerSlide(200),i.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var t,e,i,o=this;o.contentLastPos&&(o.opts.momentum===!1||o.dMs>350?(t=o.contentLastPos.left,e=o.contentLastPos.top):(t=o.contentLastPos.left+500*o.velocityX,e=o.contentLastPos.top+500*o.velocityY),i=o.limitPosition(t,e,o.contentStartPos.width,o.contentStartPos.height),i.width=o.contentStartPos.width,i.height=o.contentStartPos.height,n.fancybox.animate(o.$content,i,366))},u.prototype.endZooming=function(){var t,e,i,o,s=this,r=s.instance.current,a=s.newWidth,l=s.newHeight;s.contentLastPos&&(t=s.contentLastPos.left,e=s.contentLastPos.top,o={top:e,left:t,width:a,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(s.$content,o),a<s.canvasWidth&&l<s.canvasHeight?s.instance.scaleToFit(150):a>r.width||l>r.height?s.instance.scaleToActual(s.centerPointStartX,s.centerPointStartY,150):(i=s.limitPosition(t,e,a,l),n.fancybox.animate(s.$content,i,150)))},u.prototype.onTap=function(e){var i,o=this,r=n(e.target),a=o.instance,l=a.current,c=e&&s(e)||o.startPoints,u=c[0]?c[0].x-n(t).scrollLeft()-o.stagePos.left:0,d=c[0]?c[0].y-n(t).scrollTop()-o.stagePos.top:0,h=function(t){var i=l.opts[t];if(n.isFunction(i)&&(i=i.apply(a,[l,e])),i)switch(i){case"close":a.close(o.startEvent);break;case"toggleControls":a.toggleControls();break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(o.startEvent);break;case"zoom":"image"==l.type&&(l.isLoaded||l.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(u,d):a.group.length<2&&a.close(o.startEvent))}};if((!e.originalEvent||2!=e.originalEvent.button)&&(r.is("img")||!(u>r[0].clientWidth+r.offset().left))){if(r.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))i="Outside";else if(r.is(".fancybox-slide"))i="Slide";else{if(!a.current.$content||!a.current.$content.find(r).addBack().filter(r).length)return;i="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,Math.abs(u-o.tapX)>50||Math.abs(d-o.tapY)>50)return this;h("dblclick"+i)}else o.tapX=u,o.tapY=d,l.opts["dblclick"+i]&&l.opts["dblclick"+i]!==l.opts["click"+i]?o.tapped=setTimeout(function(){o.tapped=null,a.isAnimating||h("click"+i)},500):h("click"+i);return this}},n(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new u(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});var n=function(t){this.instance=t,this.init()};e.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,n=t.instance,i=n.group[n.currIndex].opts.slideShow;t.$button=n.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),n.group.length<2||!i?t.$button.hide():i.progress&&(t.$progress=e('<div class="fancybox-progress"></div>').appendTo(n.$refs.inner))},set:function(t){var n=this,i=n.instance,o=i.current;o&&(t===!0||o.opts.loop||i.currIndex<i.group.length-1)?n.isActive&&"video"!==o.contentType&&(n.$progress&&e.fancybox.animate(n.$progress.show(),{scaleX:1},o.opts.slideShow.speed),n.timer=setTimeout(function(){i.current.opts.loop||i.current.index!=i.group.length-1?i.next():i.jumpTo(0)},o.opts.slideShow.speed)):(n.stop(),i.idleSecondsCounter=0,i.showControls())},clear:function(){var t=this;clearTimeout(t.timer),t.timer=null,t.$progress&&t.$progress.removeAttr("style").hide()},start:function(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1),t.$progress&&t.$progress.removeAttr("style").hide()},toggle:function(){var t=this;t.isActive?t.stop():t.start()}}),e(t).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,i){var o=e&&e.SlideShow;i?o&&n.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(t,e,n){var i=e&&e.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,o,s,r){var a=i&&i.SlideShow;!a||!o.opts.slideShow||80!==r&&32!==r||e(t.activeElement).is("button,a,input")||(s.preventDefault(),a.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var n=e&&e.SlideShow;n&&n.stop()}}),e(t).on("visibilitychange",function(){var n=e.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(t.hidden?i.clear():i.set())})}(document,jQuery),function(t,e){"use strict";var n=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={},i=0;i<e.length;i++){var o=e[i];if(o&&o[1]in t){for(var s=0;s<o.length;s++)n[e[0][s]]=o[s];return n}}return!1}();if(n){var i={request:function(e){e=e||t.documentElement,e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[n.exitFullscreen]()},toggle:function(e){e=e||t.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(t[n.fullscreenElement])},enabled:function(){return Boolean(t[n.fullscreenEnabled])}};e.extend(!0,e.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),e(t).on(n.fullscreenchange,function(){var t=i.isFullscreen(),n=e.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.isAnimating=!1,n.update(!0,!0,0),n.isComplete||n.complete()),n.trigger("onFullscreenChange",t),n.$refs.container.toggleClass("fancybox-is-fullscreen",t),n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}e(t).on({"onInit.fb":function(t,e){var o;return n?void(e&&e.group[e.currIndex].opts.fullScreen?(o=e.$refs.container,o.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),i.toggle()}),e.opts.fullScreen&&e.opts.fullScreen.autoStart===!0&&i.request(),e.FullScreen=i):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()):void e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,n,i,o){e&&e.FullScreen&&70===o&&(i.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(t,e){"use strict";var n="fancybox-thumbs",i=n+"-active";e.fancybox.defaults=e.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},e.fancybox.defaults);var o=function(t){this.init(t)};e.extend(o.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,n=t.group,i=0;e.instance=t,e.opts=n[t.currIndex].opts.thumbs,t.Thumbs=e,e.$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,s=n.length;o<s&&(n[o].thumb&&i++,!(i>1));o++);i>1&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var t,i=this,o=i.instance,s=i.opts.parentEl,r=[];i.$grid||(i.$grid=e('<div class="'+n+" "+n+"-"+i.opts.axis+'"></div>').appendTo(o.$refs.container.find(s).addBack().filter(s)),
i.$grid.on("click","a",function(){o.jumpTo(e(this).attr("data-index"))})),i.$list||(i.$list=e('<div class="'+n+'__list">').appendTo(i.$grid)),e.each(o.group,function(e,n){t=n.thumb,t||"image"!==n.type||(t=n.src),r.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(t&&t.length?' style="background-image:url('+t+')"':'class="fancybox-thumbs-missing"')+"></a>")}),i.$list[0].innerHTML=r.join(""),"x"===i.opts.axis&&i.$list.width(parseInt(i.$grid.css("padding-right"),10)+o.group.length*i.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,o=this,s=o.$list,r=o.$grid;o.instance.current&&(e=s.children().removeClass(i).filter('[data-index="'+o.instance.current.index+'"]').addClass(i),n=e.position(),"y"===o.opts.axis&&(n.top<0||n.top>s.height()-e.outerHeight())?s.stop().animate({scrollTop:s.scrollTop()+n.top},t):"x"===o.opts.axis&&(n.left<r.scrollLeft()||n.left>r.scrollLeft()+(r.width()-e.outerWidth()))&&s.parent().stop().animate({scrollLeft:n.left},t))},update:function(){var t=this;t.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),t.isVisible?(t.$grid||t.create(),t.instance.trigger("onThumbsShow"),t.focus(0)):t.$grid&&t.instance.trigger("onThumbsHide"),t.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),e(t).on({"onInit.fb":function(t,e){var n;e&&!e.Thumbs&&(n=new o(e),n.isActive&&n.opts.autoStart===!0&&n.show())},"beforeShow.fb":function(t,e,n,i){var o=e&&e.Thumbs;o&&o.isVisible&&o.focus(i?0:250)},"afterKeydown.fb":function(t,e,n,i,o){var s=e&&e.Thumbs;s&&s.isActive&&71===o&&(i.preventDefault(),s.toggle())},"beforeClose.fb":function(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&n.opts.hideOnClose!==!1&&n.$grid.hide()}})}(document,jQuery),function(t,e){"use strict";function n(t){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t]})}e.extend(!0,e.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),e(t).on("click","[data-fancybox-share]",function(){var t,i,o=e.fancybox.getInstance(),s=o.current||null;s&&("function"===e.type(s.opts.share.url)&&(t=s.opts.share.url.apply(s,[o,s])),i=s.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===s.type?encodeURIComponent(s.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,n(t)).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),e.fancybox.open({src:o.translate(o,i),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){o.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(t,e,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,o=n.join("-");return{hash:e,index:i<1?1:i,gallery:o}}function o(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function s(t){var e,n;return!!t&&(e=t.current?t.current.opts:t.opts,n=e.hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""),""!==n&&n)}n.escapeSelector||(n.escapeSelector=function(t){var e=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,n=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t};return(t+"").replace(e,n)}),n(function(){n.fancybox.defaults.hash!==!1&&(n(e).on({"onInit.fb":function(t,e){var n,o;e.group[e.currIndex].opts.hash!==!1&&(n=i(),o=s(e),o&&n.gallery&&o==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(n,i,o,r){var a;o&&o.opts.hash!==!1&&(a=s(i),a&&(i.currentHash=a+(i.group.length>1?"-"+(o.index+1):""),t.location.hash!=="#"+i.currentHash&&(r&&!i.origHash&&(i.origHash=t.location.hash),i.hashTimer&&clearTimeout(i.hashTimer),i.hashTimer=setTimeout(function(){"replaceState"in t.history?(t.history[r?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+i.currentHash),r&&(i.hasCreatedHistory=!0)):t.location.hash=i.currentHash,i.hashTimer=null},300))))},"beforeClose.fb":function(n,i,o){o&&o.opts.hash!==!1&&(clearTimeout(i.hashTimer),i.currentHash&&i.hasCreatedHistory?t.history.back():i.currentHash&&("replaceState"in t.history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+(i.origHash||"")):t.location.hash=i.origHash),i.currentHash=null)}}),n(t).on("hashchange.fb",function(){var t=i(),e=null;n.each(n(".fancybox-container").get().reverse(),function(t,i){var o=n(i).data("FancyBox");if(o&&o.currentHash)return e=o,!1}),e?e.currentHash===t.gallery+"-"+t.index||1===t.index&&e.currentHash==t.gallery||(e.currentHash=null,e.close()):""!==t.gallery&&o(t)}),setTimeout(function(){n.fancybox.getInstance()||o(i())},50))})}(window,document,jQuery),function(t,e){"use strict";var n=(new Date).getTime();e(t).on({"onInit.fb":function(t,e,i){e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var i=e.current,o=(new Date).getTime();e.group.length<2||i.opts.wheel===!1||"auto"===i.opts.wheel&&"image"!==i.type||(t.preventDefault(),t.stopPropagation(),i.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,o-n<250||(n=o,e[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery),$(".services-slider").owlCarousel({loop:!0,margin:30,autoplay:!0,autoplayTimeout:5e3,autoplayHoverPause:!0,lazyLoad:!0,autoHeight:!0,responsive:{0:{items:1},600:{items:2},1e3:{items:3}}}),$(document).ready(function(){$(".form-subscription").submit(function(t){function e(t){var o=t.serialize();$.ajax({type:"GET",url:"thanks.html",data:o,dataType:"text",success:function(e){t.find(".form__error").text(""),t.find(".form__button").text(e),t.find(".form__button").addClass("button-disabled"),t.find(".form__button").prop("disabled",!0)},error:function(o,s,r){n>0?(setTimeout(e(t),i),n--):t.find(".form__error").text("ÐÑÐ¸Ð±ÐºÐ°! ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð¿Ð¾Ð²ÑÐ¾ÑÐ¸ÑÐµ Ð¿Ð¾Ð·Ð¶Ðµ!")}})}if(t.preventDefault(),0===$(this).find('*[name="email"]').val().length)return void $(this).find(".form__error").text("ÐÐ¾Ð¶Ð°Ð»ÑÐ¹ÑÑÐ°, Ð²Ð²ÐµÐ´Ð¸ÑÐµ email");var n=3,i=1e3;e($(this))})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
